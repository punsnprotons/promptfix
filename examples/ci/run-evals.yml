name: Run Evaluations

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  evaluate-prompts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install System Prompt Tool CLI
      run: npm install -g @system-prompt-tool/cli
      
    - name: Generate scenarios
      run: spt generate-scenarios --prompt ./prompts/system.txt --output ./scenarios
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        
    - name: Run evaluation
      run: spt run-eval --project-id ${{ secrets.PROJECT_ID }} --providers "openai:gpt-4,anthropic:claude-3-sonnet"
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        
    - name: Check threshold gates
      run: spt check-gates --project-id ${{ secrets.PROJECT_ID }} --exit-on-fail
      continue-on-error: false
      
    - name: Upload evaluation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: evaluation-results
        path: |
          eval-results/
          scenarios/
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read evaluation results
          const resultsDir = './eval-results';
          const files = fs.readdirSync(resultsDir);
          const latestReport = files
            .filter(f => f.startsWith('eval-report-'))
            .sort()
            .pop();
            
          if (latestReport) {
            const reportPath = path.join(resultsDir, latestReport);
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            const comment = `## ðŸ“Š Evaluation Results
            
**Summary:**
- Pass Rate: ${(report.summary.passRate * 100).toFixed(1)}%
- Total Cost: $${report.costStats.totalCost.toFixed(4)}
- Total Tokens: ${report.costStats.totalTokens.toLocaleString()}

**Provider Performance:**
${Object.entries(report.summary.byProvider).map(([provider, stats]) => 
  `- ${provider}: ${(stats.passRate * 100).toFixed(1)}% pass rate`
).join('\n')}

[View full report](${reportPath})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
