"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lru-cache";
exports.ids = ["vendor-chunks/lru-cache"];
exports.modules = {

/***/ "(rsc)/../../node_modules/lru-cache/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/lru-cache/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// A linked list to keep track of recently-used-ness\nconst Yallist = __webpack_require__(/*! yallist */ \"(rsc)/../../node_modules/yallist/yallist.js\");\nconst MAX = Symbol(\"max\");\nconst LENGTH = Symbol(\"length\");\nconst LENGTH_CALCULATOR = Symbol(\"lengthCalculator\");\nconst ALLOW_STALE = Symbol(\"allowStale\");\nconst MAX_AGE = Symbol(\"maxAge\");\nconst DISPOSE = Symbol(\"dispose\");\nconst NO_DISPOSE_ON_SET = Symbol(\"noDisposeOnSet\");\nconst LRU_LIST = Symbol(\"lruList\");\nconst CACHE = Symbol(\"cache\");\nconst UPDATE_AGE_ON_GET = Symbol(\"updateAgeOnGet\");\nconst naiveLength = ()=>1;\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n    constructor(options){\n        if (typeof options === \"number\") options = {\n            max: options\n        };\n        if (!options) options = {};\n        if (options.max && (typeof options.max !== \"number\" || options.max < 0)) throw new TypeError(\"max must be a non-negative number\");\n        // Kind of weird to have a default max of Infinity, but oh well.\n        const max = this[MAX] = options.max || Infinity;\n        const lc = options.length || naiveLength;\n        this[LENGTH_CALCULATOR] = typeof lc !== \"function\" ? naiveLength : lc;\n        this[ALLOW_STALE] = options.stale || false;\n        if (options.maxAge && typeof options.maxAge !== \"number\") throw new TypeError(\"maxAge must be a number\");\n        this[MAX_AGE] = options.maxAge || 0;\n        this[DISPOSE] = options.dispose;\n        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;\n        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;\n        this.reset();\n    }\n    // resize the cache when the max changes.\n    set max(mL) {\n        if (typeof mL !== \"number\" || mL < 0) throw new TypeError(\"max must be a non-negative number\");\n        this[MAX] = mL || Infinity;\n        trim(this);\n    }\n    get max() {\n        return this[MAX];\n    }\n    set allowStale(allowStale) {\n        this[ALLOW_STALE] = !!allowStale;\n    }\n    get allowStale() {\n        return this[ALLOW_STALE];\n    }\n    set maxAge(mA) {\n        if (typeof mA !== \"number\") throw new TypeError(\"maxAge must be a non-negative number\");\n        this[MAX_AGE] = mA;\n        trim(this);\n    }\n    get maxAge() {\n        return this[MAX_AGE];\n    }\n    // resize the cache when the lengthCalculator changes.\n    set lengthCalculator(lC) {\n        if (typeof lC !== \"function\") lC = naiveLength;\n        if (lC !== this[LENGTH_CALCULATOR]) {\n            this[LENGTH_CALCULATOR] = lC;\n            this[LENGTH] = 0;\n            this[LRU_LIST].forEach((hit)=>{\n                hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);\n                this[LENGTH] += hit.length;\n            });\n        }\n        trim(this);\n    }\n    get lengthCalculator() {\n        return this[LENGTH_CALCULATOR];\n    }\n    get length() {\n        return this[LENGTH];\n    }\n    get itemCount() {\n        return this[LRU_LIST].length;\n    }\n    rforEach(fn, thisp) {\n        thisp = thisp || this;\n        for(let walker = this[LRU_LIST].tail; walker !== null;){\n            const prev = walker.prev;\n            forEachStep(this, fn, walker, thisp);\n            walker = prev;\n        }\n    }\n    forEach(fn, thisp) {\n        thisp = thisp || this;\n        for(let walker = this[LRU_LIST].head; walker !== null;){\n            const next = walker.next;\n            forEachStep(this, fn, walker, thisp);\n            walker = next;\n        }\n    }\n    keys() {\n        return this[LRU_LIST].toArray().map((k)=>k.key);\n    }\n    values() {\n        return this[LRU_LIST].toArray().map((k)=>k.value);\n    }\n    reset() {\n        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {\n            this[LRU_LIST].forEach((hit)=>this[DISPOSE](hit.key, hit.value));\n        }\n        this[CACHE] = new Map() // hash of items by key\n        ;\n        this[LRU_LIST] = new Yallist() // list of items in order of use recency\n        ;\n        this[LENGTH] = 0 // length of items in the list\n        ;\n    }\n    dump() {\n        return this[LRU_LIST].map((hit)=>isStale(this, hit) ? false : {\n                k: hit.key,\n                v: hit.value,\n                e: hit.now + (hit.maxAge || 0)\n            }).toArray().filter((h)=>h);\n    }\n    dumpLru() {\n        return this[LRU_LIST];\n    }\n    set(key, value, maxAge) {\n        maxAge = maxAge || this[MAX_AGE];\n        if (maxAge && typeof maxAge !== \"number\") throw new TypeError(\"maxAge must be a number\");\n        const now = maxAge ? Date.now() : 0;\n        const len = this[LENGTH_CALCULATOR](value, key);\n        if (this[CACHE].has(key)) {\n            if (len > this[MAX]) {\n                del(this, this[CACHE].get(key));\n                return false;\n            }\n            const node = this[CACHE].get(key);\n            const item = node.value;\n            // dispose of the old one before overwriting\n            // split out into 2 ifs for better coverage tracking\n            if (this[DISPOSE]) {\n                if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);\n            }\n            item.now = now;\n            item.maxAge = maxAge;\n            item.value = value;\n            this[LENGTH] += len - item.length;\n            item.length = len;\n            this.get(key);\n            trim(this);\n            return true;\n        }\n        const hit = new Entry(key, value, len, now, maxAge);\n        // oversized objects fall out of cache automatically.\n        if (hit.length > this[MAX]) {\n            if (this[DISPOSE]) this[DISPOSE](key, value);\n            return false;\n        }\n        this[LENGTH] += hit.length;\n        this[LRU_LIST].unshift(hit);\n        this[CACHE].set(key, this[LRU_LIST].head);\n        trim(this);\n        return true;\n    }\n    has(key) {\n        if (!this[CACHE].has(key)) return false;\n        const hit = this[CACHE].get(key).value;\n        return !isStale(this, hit);\n    }\n    get(key) {\n        return get(this, key, true);\n    }\n    peek(key) {\n        return get(this, key, false);\n    }\n    pop() {\n        const node = this[LRU_LIST].tail;\n        if (!node) return null;\n        del(this, node);\n        return node.value;\n    }\n    del(key) {\n        del(this, this[CACHE].get(key));\n    }\n    load(arr) {\n        // reset the cache\n        this.reset();\n        const now = Date.now();\n        // A previous serialized cache has the most recent items first\n        for(let l = arr.length - 1; l >= 0; l--){\n            const hit = arr[l];\n            const expiresAt = hit.e || 0;\n            if (expiresAt === 0) // the item was created without expiration in a non aged cache\n            this.set(hit.k, hit.v);\n            else {\n                const maxAge = expiresAt - now;\n                // dont add already expired items\n                if (maxAge > 0) {\n                    this.set(hit.k, hit.v, maxAge);\n                }\n            }\n        }\n    }\n    prune() {\n        this[CACHE].forEach((value, key)=>get(this, key, false));\n    }\n}\nconst get = (self, key, doUse)=>{\n    const node = self[CACHE].get(key);\n    if (node) {\n        const hit = node.value;\n        if (isStale(self, hit)) {\n            del(self, node);\n            if (!self[ALLOW_STALE]) return undefined;\n        } else {\n            if (doUse) {\n                if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();\n                self[LRU_LIST].unshiftNode(node);\n            }\n        }\n        return hit.value;\n    }\n};\nconst isStale = (self, hit)=>{\n    if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;\n    const diff = Date.now() - hit.now;\n    return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];\n};\nconst trim = (self)=>{\n    if (self[LENGTH] > self[MAX]) {\n        for(let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;){\n            // We know that we're about to delete this one, and also\n            // what the next least recently used key will be, so just\n            // go ahead and set it now.\n            const prev = walker.prev;\n            del(self, walker);\n            walker = prev;\n        }\n    }\n};\nconst del = (self, node)=>{\n    if (node) {\n        const hit = node.value;\n        if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);\n        self[LENGTH] -= hit.length;\n        self[CACHE].delete(hit.key);\n        self[LRU_LIST].removeNode(node);\n    }\n};\nclass Entry {\n    constructor(key, value, length, now, maxAge){\n        this.key = key;\n        this.value = value;\n        this.length = length;\n        this.now = now;\n        this.maxAge = maxAge || 0;\n    }\n}\nconst forEachStep = (self, fn, node, thisp)=>{\n    let hit = node.value;\n    if (isStale(self, hit)) {\n        del(self, node);\n        if (!self[ALLOW_STALE]) hit = undefined;\n    }\n    if (hit) fn.call(thisp, hit.value, hit.key, self);\n};\nmodule.exports = LRUCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/lru-cache/index.js\n");

/***/ })

};
;