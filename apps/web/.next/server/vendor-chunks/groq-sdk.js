"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/groq-sdk";
exports.ids = ["vendor-chunks/groq-sdk"];
exports.modules = {

/***/ "(rsc)/../../node_modules/groq-sdk/_shims/MultipartBody.mjs":
/*!************************************************************!*\
  !*** ../../node_modules/groq-sdk/_shims/MultipartBody.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultipartBody: () => (/* binding */ MultipartBody)\n/* harmony export */ });\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ class MultipartBody {\n    constructor(body){\n        this.body = body;\n    }\n    get [Symbol.toStringTag]() {\n        return \"MultipartBody\";\n    }\n} //# sourceMappingURL=MultipartBody.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL19zaGltcy9NdWx0aXBhcnRCb2R5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDTSxNQUFNQTtJQUNUQyxZQUFZQyxJQUFJLENBQUU7UUFDZCxJQUFJLENBQUNBLElBQUksR0FBR0E7SUFDaEI7SUFDQSxJQUFJLENBQUNDLE9BQU9DLFdBQVcsQ0FBQyxHQUFHO1FBQ3ZCLE9BQU87SUFDWDtBQUNKLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3lzdGVtLXByb21wdC10b29sLXdlYi8uLi8uLi9ub2RlX21vZHVsZXMvZ3JvcS1zZGsvX3NoaW1zL011bHRpcGFydEJvZHkubWpzPzUwZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEaXNjbGFpbWVyOiBtb2R1bGVzIGluIF9zaGltcyBhcmVuJ3QgaW50ZW5kZWQgdG8gYmUgaW1wb3J0ZWQgYnkgU0RLIHVzZXJzLlxuICovXG5leHBvcnQgY2xhc3MgTXVsdGlwYXJ0Qm9keSB7XG4gICAgY29uc3RydWN0b3IoYm9keSkge1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIH1cbiAgICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgICAgIHJldHVybiAnTXVsdGlwYXJ0Qm9keSc7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TXVsdGlwYXJ0Qm9keS5tanMubWFwIl0sIm5hbWVzIjpbIk11bHRpcGFydEJvZHkiLCJjb25zdHJ1Y3RvciIsImJvZHkiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/_shims/MultipartBody.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/_shims/index.mjs":
/*!****************************************************!*\
  !*** ../../node_modules/groq-sdk/_shims/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Blob),\n/* harmony export */   File: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.File),\n/* harmony export */   FormData: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData),\n/* harmony export */   Headers: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Headers),\n/* harmony export */   ReadableStream: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream),\n/* harmony export */   Request: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Request),\n/* harmony export */   Response: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Response),\n/* harmony export */   auto: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.auto),\n/* harmony export */   fetch: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath),\n/* harmony export */   getDefaultAgent: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent),\n/* harmony export */   getMultipartRequestOptions: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   isFsReadStream: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream),\n/* harmony export */   kind: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind),\n/* harmony export */   setShims: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims)\n/* harmony export */ });\n/* harmony import */ var _registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry.mjs */ \"(rsc)/../../node_modules/groq-sdk/_shims/registry.mjs\");\n/* harmony import */ var groq_sdk_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! groq-sdk/_shims/auto/runtime */ \"(rsc)/../../node_modules/groq-sdk/_shims/node-runtime.mjs\");\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ \n\nconst init = ()=>{\n    if (!_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind) _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims(groq_sdk_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__.getRuntime(), {\n        auto: true\n    });\n};\n\ninit();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL19zaGltcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0NBRUMsR0FDdUM7QUFDYTtBQUM5QyxNQUFNRSxPQUFPO0lBQ2xCLElBQUksQ0FBQ0YsK0NBQVUsRUFBRUEsbURBQWMsQ0FBQ0MsbUVBQWUsSUFBSTtRQUFFQSxNQUFNO0lBQUs7QUFDbEUsRUFBRTtBQUM2QjtBQUUvQkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeXN0ZW0tcHJvbXB0LXRvb2wtd2ViLy4uLy4uL25vZGVfbW9kdWxlcy9ncm9xLXNkay9fc2hpbXMvaW5kZXgubWpzPzFiODIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEaXNjbGFpbWVyOiBtb2R1bGVzIGluIF9zaGltcyBhcmVuJ3QgaW50ZW5kZWQgdG8gYmUgaW1wb3J0ZWQgYnkgU0RLIHVzZXJzLlxuICovXG5pbXBvcnQgKiBhcyBzaGltcyBmcm9tICcuL3JlZ2lzdHJ5Lm1qcyc7XG5pbXBvcnQgKiBhcyBhdXRvIGZyb20gJ2dyb3Etc2RrL19zaGltcy9hdXRvL3J1bnRpbWUnO1xuZXhwb3J0IGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gIGlmICghc2hpbXMua2luZCkgc2hpbXMuc2V0U2hpbXMoYXV0by5nZXRSdW50aW1lKCksIHsgYXV0bzogdHJ1ZSB9KTtcbn07XG5leHBvcnQgKiBmcm9tICcuL3JlZ2lzdHJ5Lm1qcyc7XG5cbmluaXQoKTtcbiJdLCJuYW1lcyI6WyJzaGltcyIsImF1dG8iLCJpbml0Iiwia2luZCIsInNldFNoaW1zIiwiZ2V0UnVudGltZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/_shims/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/_shims/node-runtime.mjs":
/*!***********************************************************!*\
  !*** ../../node_modules/groq-sdk/_shims/node-runtime.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRuntime: () => (/* binding */ getRuntime)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"(rsc)/../../node_modules/node-fetch/lib/index.mjs\");\n/* harmony import */ var formdata_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formdata-node */ \"(rsc)/../../node_modules/formdata-node/lib/esm/index.js\");\n/* harmony import */ var agentkeepalive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! agentkeepalive */ \"(rsc)/../../node_modules/agentkeepalive/index.js\");\n/* harmony import */ var abort_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! abort-controller */ \"(rsc)/../../node_modules/abort-controller/dist/abort-controller.js\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! form-data-encoder */ \"(rsc)/../../node_modules/form-data-encoder/lib/esm/index.js\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MultipartBody.mjs */ \"(rsc)/../../node_modules/groq-sdk/_shims/MultipartBody.mjs\");\n/* harmony import */ var node_stream_web__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:stream/web */ \"node:stream/web\");\n\n\n\n\n\n\n\n\n\nlet fileFromPathWarned = false;\nasync function fileFromPath(path, ...args) {\n    // this import fails in environments that don't handle export maps correctly, like old versions of Jest\n    const { fileFromPath: _fileFromPath } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/formdata-node\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! formdata-node/file-from-path */ \"(rsc)/../../node_modules/formdata-node/lib/esm/fileFromPath.js\"));\n    if (!fileFromPathWarned) {\n        console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);\n        fileFromPathWarned = true;\n    }\n    // @ts-ignore\n    return await _fileFromPath(path, ...args);\n}\nconst defaultHttpAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_2__({\n    keepAlive: true,\n    timeout: 5 * 60 * 1000\n});\nconst defaultHttpsAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_2__.HttpsAgent({\n    keepAlive: true,\n    timeout: 5 * 60 * 1000\n});\nasync function getMultipartRequestOptions(form, opts) {\n    const encoder = new form_data_encoder__WEBPACK_IMPORTED_MODULE_5__.FormDataEncoder(form);\n    const readable = node_stream__WEBPACK_IMPORTED_MODULE_6__.Readable.from(encoder);\n    const body = new _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_8__.MultipartBody(readable);\n    const headers = {\n        ...opts.headers,\n        ...encoder.headers,\n        \"Content-Length\": encoder.contentLength\n    };\n    return {\n        ...opts,\n        body: body,\n        headers\n    };\n}\nfunction getRuntime() {\n    // Polyfill global object if needed.\n    if (typeof AbortController === \"undefined\") {\n        // @ts-expect-error (the types are subtly different, but compatible in practice)\n        globalThis.AbortController = abort_controller__WEBPACK_IMPORTED_MODULE_3__.AbortController;\n    }\n    return {\n        kind: \"node\",\n        fetch: node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n        Request: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Request,\n        Response: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Response,\n        Headers: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Headers,\n        FormData: formdata_node__WEBPACK_IMPORTED_MODULE_1__.FormData,\n        Blob: formdata_node__WEBPACK_IMPORTED_MODULE_1__.Blob,\n        File: formdata_node__WEBPACK_IMPORTED_MODULE_1__.File,\n        ReadableStream: node_stream_web__WEBPACK_IMPORTED_MODULE_7__.ReadableStream,\n        getMultipartRequestOptions,\n        getDefaultAgent: (url)=>url.startsWith(\"https\") ? defaultHttpsAgent : defaultHttpAgent,\n        fileFromPath,\n        isFsReadStream: (value)=>value instanceof node_fs__WEBPACK_IMPORTED_MODULE_4__.ReadStream\n    };\n} //# sourceMappingURL=node-runtime.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL19zaGltcy9ub2RlLXJ1bnRpbWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDRztBQUNRO0FBQ2tDO0FBQ3pCO0FBQ0Q7QUFDYjtBQUNhO0FBQ0g7QUFDakQsSUFBSVcscUJBQXFCO0FBQ3pCLGVBQWVDLGFBQWFDLElBQUksRUFBRSxHQUFHQyxJQUFJO0lBQ3JDLHVHQUF1RztJQUN2RyxNQUFNLEVBQUVGLGNBQWNHLGFBQWEsRUFBRSxHQUFHLE1BQU0sc1NBQU87SUFDckQsSUFBSSxDQUFDSixvQkFBb0I7UUFDckJLLFFBQVFDLElBQUksQ0FBQyxDQUFDLG9EQUFvRCxFQUFFQyxLQUFLQyxTQUFTLENBQUNOLE1BQU0sU0FBUyxDQUFDO1FBQ25HRixxQkFBcUI7SUFDekI7SUFDQSxhQUFhO0lBQ2IsT0FBTyxNQUFNSSxjQUFjRixTQUFTQztBQUN4QztBQUNBLE1BQU1NLG1CQUFtQixJQUFJbEIsMkNBQWNBLENBQUM7SUFBRW1CLFdBQVc7SUFBTUMsU0FBUyxJQUFJLEtBQUs7QUFBSztBQUN0RixNQUFNQyxvQkFBb0IsSUFBSXJCLHNEQUF5QixDQUFDO0lBQUVtQixXQUFXO0lBQU1DLFNBQVMsSUFBSSxLQUFLO0FBQUs7QUFDbEcsZUFBZUcsMkJBQTJCQyxJQUFJLEVBQUVDLElBQUk7SUFDaEQsTUFBTUMsVUFBVSxJQUFJckIsOERBQWVBLENBQUNtQjtJQUNwQyxNQUFNRyxXQUFXckIsaURBQVFBLENBQUNzQixJQUFJLENBQUNGO0lBQy9CLE1BQU1HLE9BQU8sSUFBSXRCLDZEQUFhQSxDQUFDb0I7SUFDL0IsTUFBTUcsVUFBVTtRQUNaLEdBQUdMLEtBQUtLLE9BQU87UUFDZixHQUFHSixRQUFRSSxPQUFPO1FBQ2xCLGtCQUFrQkosUUFBUUssYUFBYTtJQUMzQztJQUNBLE9BQU87UUFBRSxHQUFHTixJQUFJO1FBQUVJLE1BQU1BO1FBQU1DO0lBQVE7QUFDMUM7QUFDTyxTQUFTRTtJQUNaLG9DQUFvQztJQUNwQyxJQUFJLE9BQU8vQixvQkFBb0IsYUFBYTtRQUN4QyxnRkFBZ0Y7UUFDaEZnQyxXQUFXaEMsZUFBZSxHQUFHQyw2REFBdUJBO0lBQ3hEO0lBQ0EsT0FBTztRQUNIZ0MsTUFBTTtRQUNOQyxPQUFPckMsa0RBQVU7UUFDakJ1QyxTQUFTdkMsK0NBQVU7UUFDbkJ3QyxVQUFVeEMsZ0RBQVc7UUFDckJ5QyxTQUFTekMsK0NBQVU7UUFDbkIwQyxVQUFVekMsbURBQVc7UUFDckIwQyxNQUFNMUMsK0NBQU87UUFDYjJDLE1BQU0zQywrQ0FBTztRQUNiUyxjQUFjQSw2REFBQUE7UUFDZGU7UUFDQW9CLGlCQUFpQixDQUFDQyxNQUFTQSxJQUFJQyxVQUFVLENBQUMsV0FBV3hCLG9CQUFvQkg7UUFDekVSO1FBQ0FvQyxnQkFBZ0IsQ0FBQ0MsUUFBVUEsaUJBQWlCM0MsK0NBQVlBO0lBQzVEO0FBQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeXN0ZW0tcHJvbXB0LXRvb2wtd2ViLy4uLy4uL25vZGVfbW9kdWxlcy9ncm9xLXNkay9fc2hpbXMvbm9kZS1ydW50aW1lLm1qcz80MmMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5mIGZyb20gJ25vZGUtZmV0Y2gnO1xuaW1wb3J0ICogYXMgZmQgZnJvbSAnZm9ybWRhdGEtbm9kZSc7XG5pbXBvcnQgS2VlcEFsaXZlQWdlbnQgZnJvbSAnYWdlbnRrZWVwYWxpdmUnO1xuaW1wb3J0IHsgQWJvcnRDb250cm9sbGVyIGFzIEFib3J0Q29udHJvbGxlclBvbHlmaWxsIH0gZnJvbSAnYWJvcnQtY29udHJvbGxlcic7XG5pbXBvcnQgeyBSZWFkU3RyZWFtIGFzIEZzUmVhZFN0cmVhbSB9IGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0IHsgRm9ybURhdGFFbmNvZGVyIH0gZnJvbSAnZm9ybS1kYXRhLWVuY29kZXInO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdub2RlOnN0cmVhbSc7XG5pbXBvcnQgeyBNdWx0aXBhcnRCb2R5IH0gZnJvbSBcIi4vTXVsdGlwYXJ0Qm9keS5tanNcIjtcbmltcG9ydCB7IFJlYWRhYmxlU3RyZWFtIH0gZnJvbSAnbm9kZTpzdHJlYW0vd2ViJztcbmxldCBmaWxlRnJvbVBhdGhXYXJuZWQgPSBmYWxzZTtcbmFzeW5jIGZ1bmN0aW9uIGZpbGVGcm9tUGF0aChwYXRoLCAuLi5hcmdzKSB7XG4gICAgLy8gdGhpcyBpbXBvcnQgZmFpbHMgaW4gZW52aXJvbm1lbnRzIHRoYXQgZG9uJ3QgaGFuZGxlIGV4cG9ydCBtYXBzIGNvcnJlY3RseSwgbGlrZSBvbGQgdmVyc2lvbnMgb2YgSmVzdFxuICAgIGNvbnN0IHsgZmlsZUZyb21QYXRoOiBfZmlsZUZyb21QYXRoIH0gPSBhd2FpdCBpbXBvcnQoJ2Zvcm1kYXRhLW5vZGUvZmlsZS1mcm9tLXBhdGgnKTtcbiAgICBpZiAoIWZpbGVGcm9tUGF0aFdhcm5lZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oYGZpbGVGcm9tUGF0aCBpcyBkZXByZWNhdGVkOyB1c2UgZnMuY3JlYXRlUmVhZFN0cmVhbSgke0pTT04uc3RyaW5naWZ5KHBhdGgpfSkgaW5zdGVhZGApO1xuICAgICAgICBmaWxlRnJvbVBhdGhXYXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIGF3YWl0IF9maWxlRnJvbVBhdGgocGF0aCwgLi4uYXJncyk7XG59XG5jb25zdCBkZWZhdWx0SHR0cEFnZW50ID0gbmV3IEtlZXBBbGl2ZUFnZW50KHsga2VlcEFsaXZlOiB0cnVlLCB0aW1lb3V0OiA1ICogNjAgKiAxMDAwIH0pO1xuY29uc3QgZGVmYXVsdEh0dHBzQWdlbnQgPSBuZXcgS2VlcEFsaXZlQWdlbnQuSHR0cHNBZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSwgdGltZW91dDogNSAqIDYwICogMTAwMCB9KTtcbmFzeW5jIGZ1bmN0aW9uIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zKGZvcm0sIG9wdHMpIHtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IEZvcm1EYXRhRW5jb2Rlcihmb3JtKTtcbiAgICBjb25zdCByZWFkYWJsZSA9IFJlYWRhYmxlLmZyb20oZW5jb2Rlcik7XG4gICAgY29uc3QgYm9keSA9IG5ldyBNdWx0aXBhcnRCb2R5KHJlYWRhYmxlKTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAuLi5vcHRzLmhlYWRlcnMsXG4gICAgICAgIC4uLmVuY29kZXIuaGVhZGVycyxcbiAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogZW5jb2Rlci5jb250ZW50TGVuZ3RoLFxuICAgIH07XG4gICAgcmV0dXJuIHsgLi4ub3B0cywgYm9keTogYm9keSwgaGVhZGVycyB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJ1bnRpbWUoKSB7XG4gICAgLy8gUG9seWZpbGwgZ2xvYmFsIG9iamVjdCBpZiBuZWVkZWQuXG4gICAgaWYgKHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgKHRoZSB0eXBlcyBhcmUgc3VidGx5IGRpZmZlcmVudCwgYnV0IGNvbXBhdGlibGUgaW4gcHJhY3RpY2UpXG4gICAgICAgIGdsb2JhbFRoaXMuQWJvcnRDb250cm9sbGVyID0gQWJvcnRDb250cm9sbGVyUG9seWZpbGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6ICdub2RlJyxcbiAgICAgICAgZmV0Y2g6IG5mLmRlZmF1bHQsXG4gICAgICAgIFJlcXVlc3Q6IG5mLlJlcXVlc3QsXG4gICAgICAgIFJlc3BvbnNlOiBuZi5SZXNwb25zZSxcbiAgICAgICAgSGVhZGVyczogbmYuSGVhZGVycyxcbiAgICAgICAgRm9ybURhdGE6IGZkLkZvcm1EYXRhLFxuICAgICAgICBCbG9iOiBmZC5CbG9iLFxuICAgICAgICBGaWxlOiBmZC5GaWxlLFxuICAgICAgICBSZWFkYWJsZVN0cmVhbSxcbiAgICAgICAgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMsXG4gICAgICAgIGdldERlZmF1bHRBZ2VudDogKHVybCkgPT4gKHVybC5zdGFydHNXaXRoKCdodHRwcycpID8gZGVmYXVsdEh0dHBzQWdlbnQgOiBkZWZhdWx0SHR0cEFnZW50KSxcbiAgICAgICAgZmlsZUZyb21QYXRoLFxuICAgICAgICBpc0ZzUmVhZFN0cmVhbTogKHZhbHVlKSA9PiB2YWx1ZSBpbnN0YW5jZW9mIEZzUmVhZFN0cmVhbSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1ydW50aW1lLm1qcy5tYXAiXSwibmFtZXMiOlsibmYiLCJmZCIsIktlZXBBbGl2ZUFnZW50IiwiQWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyUG9seWZpbGwiLCJSZWFkU3RyZWFtIiwiRnNSZWFkU3RyZWFtIiwiRm9ybURhdGFFbmNvZGVyIiwiUmVhZGFibGUiLCJNdWx0aXBhcnRCb2R5IiwiUmVhZGFibGVTdHJlYW0iLCJmaWxlRnJvbVBhdGhXYXJuZWQiLCJmaWxlRnJvbVBhdGgiLCJwYXRoIiwiYXJncyIsIl9maWxlRnJvbVBhdGgiLCJjb25zb2xlIiwid2FybiIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWZhdWx0SHR0cEFnZW50Iiwia2VlcEFsaXZlIiwidGltZW91dCIsImRlZmF1bHRIdHRwc0FnZW50IiwiSHR0cHNBZ2VudCIsImdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zIiwiZm9ybSIsIm9wdHMiLCJlbmNvZGVyIiwicmVhZGFibGUiLCJmcm9tIiwiYm9keSIsImhlYWRlcnMiLCJjb250ZW50TGVuZ3RoIiwiZ2V0UnVudGltZSIsImdsb2JhbFRoaXMiLCJraW5kIiwiZmV0Y2giLCJkZWZhdWx0IiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiSGVhZGVycyIsIkZvcm1EYXRhIiwiQmxvYiIsIkZpbGUiLCJnZXREZWZhdWx0QWdlbnQiLCJ1cmwiLCJzdGFydHNXaXRoIiwiaXNGc1JlYWRTdHJlYW0iLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/_shims/node-runtime.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/_shims/registry.mjs":
/*!*******************************************************!*\
  !*** ../../node_modules/groq-sdk/_shims/registry.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* binding */ Blob),\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   FormData: () => (/* binding */ FormData),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   ReadableStream: () => (/* binding */ ReadableStream),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   Response: () => (/* binding */ Response),\n/* harmony export */   auto: () => (/* binding */ auto),\n/* harmony export */   fetch: () => (/* binding */ fetch),\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath),\n/* harmony export */   getDefaultAgent: () => (/* binding */ getDefaultAgent),\n/* harmony export */   getMultipartRequestOptions: () => (/* binding */ getMultipartRequestOptions),\n/* harmony export */   isFsReadStream: () => (/* binding */ isFsReadStream),\n/* harmony export */   kind: () => (/* binding */ kind),\n/* harmony export */   setShims: () => (/* binding */ setShims)\n/* harmony export */ });\nlet auto = false;\nlet kind = undefined;\nlet fetch = undefined;\nlet Request = undefined;\nlet Response = undefined;\nlet Headers = undefined;\nlet FormData = undefined;\nlet Blob = undefined;\nlet File = undefined;\nlet ReadableStream = undefined;\nlet getMultipartRequestOptions = undefined;\nlet getDefaultAgent = undefined;\nlet fileFromPath = undefined;\nlet isFsReadStream = undefined;\nfunction setShims(shims, options = {\n    auto: false\n}) {\n    if (auto) {\n        throw new Error(`you must \\`import 'groq-sdk/shims/${shims.kind}'\\` before importing anything else from groq-sdk`);\n    }\n    if (kind) {\n        throw new Error(`can't \\`import 'groq-sdk/shims/${shims.kind}'\\` after \\`import 'groq-sdk/shims/${kind}'\\``);\n    }\n    auto = options.auto;\n    kind = shims.kind;\n    fetch = shims.fetch;\n    Request = shims.Request;\n    Response = shims.Response;\n    Headers = shims.Headers;\n    FormData = shims.FormData;\n    Blob = shims.Blob;\n    File = shims.File;\n    ReadableStream = shims.ReadableStream;\n    getMultipartRequestOptions = shims.getMultipartRequestOptions;\n    getDefaultAgent = shims.getDefaultAgent;\n    fileFromPath = shims.fileFromPath;\n    isFsReadStream = shims.isFsReadStream;\n} //# sourceMappingURL=registry.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL19zaGltcy9yZWdpc3RyeS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBSUEsT0FBTyxNQUFNO0FBQ2pCLElBQUlDLE9BQU9DLFVBQVU7QUFDckIsSUFBSUMsUUFBUUQsVUFBVTtBQUN0QixJQUFJRSxVQUFVRixVQUFVO0FBQ3hCLElBQUlHLFdBQVdILFVBQVU7QUFDekIsSUFBSUksVUFBVUosVUFBVTtBQUN4QixJQUFJSyxXQUFXTCxVQUFVO0FBQ3pCLElBQUlNLE9BQU9OLFVBQVU7QUFDckIsSUFBSU8sT0FBT1AsVUFBVTtBQUNyQixJQUFJUSxpQkFBaUJSLFVBQVU7QUFDL0IsSUFBSVMsNkJBQTZCVCxVQUFVO0FBQzNDLElBQUlVLGtCQUFrQlYsVUFBVTtBQUNoQyxJQUFJVyxlQUFlWCxVQUFVO0FBQzdCLElBQUlZLGlCQUFpQlosVUFBVTtBQUMvQixTQUFTYSxTQUFTQyxLQUFLLEVBQUVDLFVBQVU7SUFBRWpCLE1BQU07QUFBTSxDQUFDO0lBQ3JELElBQUlBLE1BQU07UUFDTixNQUFNLElBQUlrQixNQUFNLENBQUMsa0NBQWtDLEVBQUVGLE1BQU1mLElBQUksQ0FBQyxnREFBZ0QsQ0FBQztJQUNySDtJQUNBLElBQUlBLE1BQU07UUFDTixNQUFNLElBQUlpQixNQUFNLENBQUMsK0JBQStCLEVBQUVGLE1BQU1mLElBQUksQ0FBQyxtQ0FBbUMsRUFBRUEsS0FBSyxHQUFHLENBQUM7SUFDL0c7SUFDQUQsT0FBT2lCLFFBQVFqQixJQUFJO0lBQ25CQyxPQUFPZSxNQUFNZixJQUFJO0lBQ2pCRSxRQUFRYSxNQUFNYixLQUFLO0lBQ25CQyxVQUFVWSxNQUFNWixPQUFPO0lBQ3ZCQyxXQUFXVyxNQUFNWCxRQUFRO0lBQ3pCQyxVQUFVVSxNQUFNVixPQUFPO0lBQ3ZCQyxXQUFXUyxNQUFNVCxRQUFRO0lBQ3pCQyxPQUFPUSxNQUFNUixJQUFJO0lBQ2pCQyxPQUFPTyxNQUFNUCxJQUFJO0lBQ2pCQyxpQkFBaUJNLE1BQU1OLGNBQWM7SUFDckNDLDZCQUE2QkssTUFBTUwsMEJBQTBCO0lBQzdEQyxrQkFBa0JJLE1BQU1KLGVBQWU7SUFDdkNDLGVBQWVHLE1BQU1ILFlBQVk7SUFDakNDLGlCQUFpQkUsTUFBTUYsY0FBYztBQUN6QyxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N5c3RlbS1wcm9tcHQtdG9vbC13ZWIvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL19zaGltcy9yZWdpc3RyeS5tanM/OGI5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgbGV0IGF1dG8gPSBmYWxzZTtcbmV4cG9ydCBsZXQga2luZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZmV0Y2ggPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IFJlcXVlc3QgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IFJlc3BvbnNlID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBIZWFkZXJzID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBGb3JtRGF0YSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgQmxvYiA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgRmlsZSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgUmVhZGFibGVTdHJlYW0gPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBnZXREZWZhdWx0QWdlbnQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGZpbGVGcm9tUGF0aCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgaXNGc1JlYWRTdHJlYW0gPSB1bmRlZmluZWQ7XG5leHBvcnQgZnVuY3Rpb24gc2V0U2hpbXMoc2hpbXMsIG9wdGlvbnMgPSB7IGF1dG86IGZhbHNlIH0pIHtcbiAgICBpZiAoYXV0bykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHlvdSBtdXN0IFxcYGltcG9ydCAnZ3JvcS1zZGsvc2hpbXMvJHtzaGltcy5raW5kfSdcXGAgYmVmb3JlIGltcG9ydGluZyBhbnl0aGluZyBlbHNlIGZyb20gZ3JvcS1zZGtgKTtcbiAgICB9XG4gICAgaWYgKGtpbmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW4ndCBcXGBpbXBvcnQgJ2dyb3Etc2RrL3NoaW1zLyR7c2hpbXMua2luZH0nXFxgIGFmdGVyIFxcYGltcG9ydCAnZ3JvcS1zZGsvc2hpbXMvJHtraW5kfSdcXGBgKTtcbiAgICB9XG4gICAgYXV0byA9IG9wdGlvbnMuYXV0bztcbiAgICBraW5kID0gc2hpbXMua2luZDtcbiAgICBmZXRjaCA9IHNoaW1zLmZldGNoO1xuICAgIFJlcXVlc3QgPSBzaGltcy5SZXF1ZXN0O1xuICAgIFJlc3BvbnNlID0gc2hpbXMuUmVzcG9uc2U7XG4gICAgSGVhZGVycyA9IHNoaW1zLkhlYWRlcnM7XG4gICAgRm9ybURhdGEgPSBzaGltcy5Gb3JtRGF0YTtcbiAgICBCbG9iID0gc2hpbXMuQmxvYjtcbiAgICBGaWxlID0gc2hpbXMuRmlsZTtcbiAgICBSZWFkYWJsZVN0cmVhbSA9IHNoaW1zLlJlYWRhYmxlU3RyZWFtO1xuICAgIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zID0gc2hpbXMuZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnM7XG4gICAgZ2V0RGVmYXVsdEFnZW50ID0gc2hpbXMuZ2V0RGVmYXVsdEFnZW50O1xuICAgIGZpbGVGcm9tUGF0aCA9IHNoaW1zLmZpbGVGcm9tUGF0aDtcbiAgICBpc0ZzUmVhZFN0cmVhbSA9IHNoaW1zLmlzRnNSZWFkU3RyZWFtO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVnaXN0cnkubWpzLm1hcCJdLCJuYW1lcyI6WyJhdXRvIiwia2luZCIsInVuZGVmaW5lZCIsImZldGNoIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiSGVhZGVycyIsIkZvcm1EYXRhIiwiQmxvYiIsIkZpbGUiLCJSZWFkYWJsZVN0cmVhbSIsImdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zIiwiZ2V0RGVmYXVsdEFnZW50IiwiZmlsZUZyb21QYXRoIiwiaXNGc1JlYWRTdHJlYW0iLCJzZXRTaGltcyIsInNoaW1zIiwib3B0aW9ucyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/_shims/registry.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/core.mjs":
/*!********************************************!*\
  !*** ../../node_modules/groq-sdk/core.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: () => (/* binding */ APIClient),\n/* harmony export */   APIPromise: () => (/* binding */ APIPromise),\n/* harmony export */   AbstractPage: () => (/* binding */ AbstractPage),\n/* harmony export */   PagePromise: () => (/* binding */ PagePromise),\n/* harmony export */   castToError: () => (/* binding */ castToError),\n/* harmony export */   coerceBoolean: () => (/* binding */ coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* binding */ coerceFloat),\n/* harmony export */   coerceInteger: () => (/* binding */ coerceInteger),\n/* harmony export */   createForm: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.createForm),\n/* harmony export */   createResponseHeaders: () => (/* binding */ createResponseHeaders),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   ensurePresent: () => (/* binding */ ensurePresent),\n/* harmony export */   getHeader: () => (/* binding */ getHeader),\n/* harmony export */   getRequiredHeader: () => (/* binding */ getRequiredHeader),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isEmptyObj: () => (/* binding */ isEmptyObj),\n/* harmony export */   isHeadersProtocol: () => (/* binding */ isHeadersProtocol),\n/* harmony export */   isObj: () => (/* binding */ isObj),\n/* harmony export */   isRequestOptions: () => (/* binding */ isRequestOptions),\n/* harmony export */   isRunningInBrowser: () => (/* binding */ isRunningInBrowser),\n/* harmony export */   maybeCoerceBoolean: () => (/* binding */ maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* binding */ maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* binding */ maybeCoerceInteger),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions),\n/* harmony export */   readEnv: () => (/* binding */ readEnv),\n/* harmony export */   safeJSON: () => (/* binding */ safeJSON),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   toBase64: () => (/* binding */ toBase64)\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./version.mjs */ \"(rsc)/../../node_modules/groq-sdk/version.mjs\");\n/* harmony import */ var _lib_streaming_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/streaming.mjs */ \"(rsc)/../../node_modules/groq-sdk/lib/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/../../node_modules/groq-sdk/error.mjs\");\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(rsc)/../../node_modules/groq-sdk/_shims/index.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/../../node_modules/groq-sdk/uploads.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _APIClient_baseURLOverridden, _AbstractPage_client;\n\n\n\n\n// try running side effects outside of _shims/index to workaround https://github.com/vercel/next.js/issues/76881\n(0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.init)();\n\n\nasync function defaultParseResponse(props) {\n    const { response } = props;\n    if (props.options.stream) {\n        debug(\"response\", response.status, response.url, response.headers, response.body);\n        // Note: there is an invariant here that isn't represented in the type system\n        // that if you set `stream: true` the response type must also be `Stream<T>`\n        if (props.options.__streamClass) {\n            return props.options.__streamClass.fromSSEResponse(response, props.controller);\n        }\n        return _lib_streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream.fromSSEResponse(response, props.controller);\n    }\n    // fetch refuses to read the body when the status code is 204.\n    if (response.status === 204) {\n        return null;\n    }\n    if (props.options.__binaryResponse) {\n        return response;\n    }\n    const contentType = response.headers.get(\"content-type\");\n    const mediaType = contentType?.split(\";\")[0]?.trim();\n    const isJSON = mediaType?.includes(\"application/json\") || mediaType?.endsWith(\"+json\");\n    if (isJSON) {\n        const json = await response.json();\n        debug(\"response\", response.status, response.url, response.headers, json);\n        return json;\n    }\n    const text = await response.text();\n    debug(\"response\", response.status, response.url, response.headers, text);\n    // TODO handle blob, arraybuffer, other content types, etc.\n    return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */ class APIPromise extends Promise {\n    constructor(responsePromise, parseResponse = defaultParseResponse){\n        super((resolve)=>{\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise(this.responsePromise, async (props)=>transform(await this.parseResponse(props), props));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'groq-sdk'`:\n     * - `import 'groq-sdk/shims/node'` (if you're running on Node)\n     * - `import 'groq-sdk/shims/web'` (otherwise)\n     */ asResponse() {\n        return this.responsePromise.then((p)=>p.response);\n    }\n    /**\n     * Gets the parsed response data and the raw `Response` instance.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'groq-sdk'`:\n     * - `import 'groq-sdk/shims/node'` (if you're running on Node)\n     * - `import 'groq-sdk/shims/web'` (otherwise)\n     */ async withResponse() {\n        const [data, response] = await Promise.all([\n            this.parse(),\n            this.asResponse()\n        ]);\n        return {\n            data,\n            response\n        };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then(this.parseResponse);\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\nclass APIClient {\n    constructor({ baseURL, baseURLOverridden, maxRetries = 2, timeout = 60000, httpAgent, fetch: overriddenFetch }){\n        _APIClient_baseURLOverridden.set(this, void 0);\n        this.baseURL = baseURL;\n        __classPrivateFieldSet(this, _APIClient_baseURLOverridden, baseURLOverridden, \"f\");\n        this.maxRetries = validatePositiveInteger(\"maxRetries\", maxRetries);\n        this.timeout = validatePositiveInteger(\"timeout\", timeout);\n        this.httpAgent = httpAgent;\n        this.fetch = overriddenFetch ?? _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch;\n    }\n    authHeaders(opts) {\n        return {};\n    }\n    /**\n     * Override this to add your own default headers, for example:\n     *\n     *  {\n     *    ...super.defaultHeaders(),\n     *    Authorization: 'Bearer 123',\n     *  }\n     */ defaultHeaders(opts) {\n        return {\n            Accept: \"application/json\",\n            ...[\n                \"head\",\n                \"get\"\n            ].includes(opts.method) ? {} : {\n                \"Content-Type\": \"application/json\"\n            },\n            \"User-Agent\": this.getUserAgent(),\n            ...getPlatformHeaders(),\n            ...this.authHeaders(opts)\n        };\n    }\n    /**\n     * Override this to add your own headers validation:\n     */ validateHeaders(headers, customHeaders) {}\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${uuid4()}`;\n    }\n    get(path, opts) {\n        return this.methodRequest(\"get\", path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest(\"post\", path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest(\"patch\", path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest(\"put\", path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest(\"delete\", path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then(async (opts)=>{\n            const body = opts && (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isBlobLike)(opts?.body) ? new DataView(await opts.body.arrayBuffer()) : opts?.body instanceof DataView ? opts.body : opts?.body instanceof ArrayBuffer ? new DataView(opts.body) : opts && ArrayBuffer.isView(opts?.body) ? new DataView(opts.body.buffer) : opts?.body;\n            return {\n                method,\n                path,\n                ...opts,\n                body\n            };\n        }));\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, {\n            method: \"get\",\n            path,\n            ...opts\n        });\n    }\n    calculateContentLength(body) {\n        if (typeof body === \"string\") {\n            if (typeof Buffer !== \"undefined\") {\n                return Buffer.byteLength(body, \"utf8\").toString();\n            }\n            if (typeof TextEncoder !== \"undefined\") {\n                const encoder = new TextEncoder();\n                const encoded = encoder.encode(body);\n                return encoded.length.toString();\n            }\n        } else if (ArrayBuffer.isView(body)) {\n            return body.byteLength.toString();\n        }\n        return null;\n    }\n    async buildRequest(inputOptions, { retryCount = 0 } = {}) {\n        const options = {\n            ...inputOptions\n        };\n        const { method, path, query, defaultBaseURL, headers: headers = {} } = options;\n        const body = ArrayBuffer.isView(options.body) || options.__binaryRequest && typeof options.body === \"string\" ? options.body : (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;\n        const contentLength = this.calculateContentLength(body);\n        const url = this.buildURL(path, query, defaultBaseURL);\n        if (\"timeout\" in options) validatePositiveInteger(\"timeout\", options.timeout);\n        options.timeout = options.timeout ?? this.timeout;\n        const httpAgent = options.httpAgent ?? this.httpAgent ?? (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent)(url);\n        const minAgentTimeout = options.timeout + 1000;\n        if (typeof httpAgent?.options?.timeout === \"number\" && minAgentTimeout > (httpAgent.options.timeout ?? 0)) {\n            // Allow any given request to bump our agent active socket timeout.\n            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n            // and without mutating agent we would need to create more of them.\n            // This tradeoff optimizes for performance.\n            httpAgent.options.timeout = minAgentTimeout;\n        }\n        if (this.idempotencyHeader && method !== \"get\") {\n            if (!inputOptions.idempotencyKey) inputOptions.idempotencyKey = this.defaultIdempotencyKey();\n            headers[this.idempotencyHeader] = inputOptions.idempotencyKey;\n        }\n        const reqHeaders = this.buildHeaders({\n            options,\n            headers,\n            contentLength,\n            retryCount\n        });\n        const req = {\n            method,\n            ...body && {\n                body: body\n            },\n            headers: reqHeaders,\n            ...httpAgent && {\n                agent: httpAgent\n            },\n            // @ts-ignore node-fetch uses a custom AbortSignal type that is\n            // not compatible with standard web types\n            signal: options.signal ?? null\n        };\n        return {\n            req,\n            url,\n            timeout: options.timeout\n        };\n    }\n    buildHeaders({ options, headers, contentLength, retryCount }) {\n        const reqHeaders = {};\n        if (contentLength) {\n            reqHeaders[\"content-length\"] = contentLength;\n        }\n        const defaultHeaders = this.defaultHeaders(options);\n        applyHeadersMut(reqHeaders, defaultHeaders);\n        applyHeadersMut(reqHeaders, headers);\n        // let builtin fetch set the Content-Type for multipart bodies\n        if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) && _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.kind !== \"node\") {\n            delete reqHeaders[\"content-type\"];\n        }\n        // Don't set theses headers if they were already set or removed through default headers or by the caller.\n        // We check `defaultHeaders` and `headers`, which can contain nulls, instead of `reqHeaders` to account\n        // for the removal case.\n        if (getHeader(defaultHeaders, \"x-stainless-retry-count\") === undefined && getHeader(headers, \"x-stainless-retry-count\") === undefined) {\n            reqHeaders[\"x-stainless-retry-count\"] = String(retryCount);\n        }\n        if (getHeader(defaultHeaders, \"x-stainless-timeout\") === undefined && getHeader(headers, \"x-stainless-timeout\") === undefined && options.timeout) {\n            reqHeaders[\"x-stainless-timeout\"] = String(Math.trunc(options.timeout / 1000));\n        }\n        this.validateHeaders(reqHeaders, headers);\n        return reqHeaders;\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */ async prepareOptions(options) {}\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */ async prepareRequest(request, { url, options }) {}\n    parseHeaders(headers) {\n        return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header)=>[\n                ...header\n            ])) : {\n            ...headers\n        };\n    }\n    makeStatusError(status, error, message, headers) {\n        return _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIError.generate(status, error, message, headers);\n    }\n    request(options, remainingRetries = null) {\n        return new APIPromise(this.makeRequest(options, remainingRetries));\n    }\n    async makeRequest(optionsInput, retriesRemaining) {\n        const options = await optionsInput;\n        const maxRetries = options.maxRetries ?? this.maxRetries;\n        if (retriesRemaining == null) {\n            retriesRemaining = maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = await this.buildRequest(options, {\n            retryCount: maxRetries - retriesRemaining\n        });\n        await this.prepareRequest(req, {\n            url,\n            options\n        });\n        debug(\"request\", url, options, req.headers);\n        if (options.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        if (response instanceof Error) {\n            if (options.signal?.aborted) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n            }\n            if (retriesRemaining) {\n                return this.retryRequest(options, retriesRemaining);\n            }\n            if (response.name === \"AbortError\") {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError();\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionError({\n                cause: response\n            });\n        }\n        const responseHeaders = createResponseHeaders(response.headers);\n        if (!response.ok) {\n            if (retriesRemaining && this.shouldRetry(response)) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n                return this.retryRequest(options, retriesRemaining, responseHeaders);\n            }\n            const errText = await response.text().catch((e)=>castToError(e).message);\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n            debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n            throw err;\n        }\n        return {\n            response,\n            options,\n            controller\n        };\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null);\n        return new PagePromise(this, request, Page);\n    }\n    buildURL(path, query, defaultBaseURL) {\n        const baseURL = !__classPrivateFieldGet(this, _APIClient_baseURLOverridden, \"f\") && defaultBaseURL || this.baseURL;\n        const url = isAbsoluteURL(path) ? new URL(path) : new URL(baseURL + (baseURL.endsWith(\"/\") && path.startsWith(\"/\") ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = {\n                ...defaultQuery,\n                ...query\n            };\n        }\n        if (typeof query === \"object\" && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    stringifyQuery(query) {\n        return Object.entries(query).filter(([_, value])=>typeof value !== \"undefined\").map(([key, value])=>{\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n            }\n            if (value === null) {\n                return `${encodeURIComponent(key)}=`;\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.GroqError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n        }).join(\"&\");\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, ...options } = init || {};\n        if (signal) signal.addEventListener(\"abort\", ()=>controller.abort());\n        const timeout = setTimeout(()=>controller.abort(), ms);\n        const fetchOptions = {\n            signal: controller.signal,\n            ...options\n        };\n        if (fetchOptions.method) {\n            // Custom methods like 'patch' need to be uppercased\n            // See https://github.com/nodejs/undici/issues/2294\n            fetchOptions.method = fetchOptions.method.toUpperCase();\n        }\n        return(// use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n        this.fetch.call(undefined, url, fetchOptions).finally(()=>{\n            clearTimeout(timeout);\n        }));\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get(\"x-should-retry\");\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === \"true\") return true;\n        if (shouldRetryHeader === \"false\") return false;\n        // Retry on request timeouts.\n        if (response.status === 408) return true;\n        // Retry on lock timeouts.\n        if (response.status === 409) return true;\n        // Retry on rate limits.\n        if (response.status === 429) return true;\n        // Retry internal errors.\n        if (response.status >= 500) return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.[\"retry-after-ms\"];\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.[\"retry-after\"];\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            } else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await sleep(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${_version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION}`;\n    }\n}\n_APIClient_baseURLOverridden = new WeakMap();\nclass AbstractPage {\n    constructor(client, response, body, options){\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length) return false;\n        return this.nextPageInfo() != null;\n    }\n    async getNextPage() {\n        const nextInfo = this.nextPageInfo();\n        if (!nextInfo) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.GroqError(\"No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.\");\n        }\n        const nextOptions = {\n            ...this.options\n        };\n        if (\"params\" in nextInfo && typeof nextOptions.query === \"object\") {\n            nextOptions.query = {\n                ...nextOptions.query,\n                ...nextInfo.params\n            };\n        } else if (\"url\" in nextInfo) {\n            const params = [\n                ...Object.entries(nextOptions.query || {}),\n                ...nextInfo.url.searchParams.entries()\n            ];\n            for (const [key, value] of params){\n                nextInfo.url.searchParams.set(key, value);\n            }\n            nextOptions.query = undefined;\n            nextOptions.path = nextInfo.url.toString();\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let page = this;\n        yield page;\n        while(page.hasNextPage()){\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()){\n            for (const item of page.getPaginatedItems()){\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */ class PagePromise extends APIPromise {\n    constructor(client, request, Page){\n        super(request, async (props)=>new Page(client, props.response, await defaultParseResponse(props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */ async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page){\n            yield item;\n        }\n    }\n}\nconst createResponseHeaders = (headers)=>{\n    return new Proxy(Object.fromEntries(// @ts-ignore\n    headers.entries()), {\n        get (target, name) {\n            const key = name.toString();\n            return target[key.toLowerCase()] || target[key];\n        }\n    });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n    method: true,\n    path: true,\n    query: true,\n    body: true,\n    headers: true,\n    defaultBaseURL: true,\n    maxRetries: true,\n    stream: true,\n    timeout: true,\n    httpAgent: true,\n    signal: true,\n    idempotencyKey: true,\n    __binaryRequest: true,\n    __binaryResponse: true,\n    __streamClass: true\n};\nconst isRequestOptions = (obj)=>{\n    return typeof obj === \"object\" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k)=>hasOwn(requestOptionsKeys, k));\n};\nconst getPlatformProperties = ()=>{\n    if (typeof Deno !== \"undefined\" && Deno.build != null) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(Deno.build.os),\n            \"X-Stainless-Arch\": normalizeArch(Deno.build.arch),\n            \"X-Stainless-Runtime\": \"deno\",\n            \"X-Stainless-Runtime-Version\": typeof Deno.version === \"string\" ? Deno.version : Deno.version?.deno ?? \"unknown\"\n        };\n    }\n    if (typeof EdgeRuntime !== \"undefined\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": `other:${EdgeRuntime}`,\n            \"X-Stainless-Runtime\": \"edge\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    // Check if Node.js\n    if (Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(process.platform),\n            \"X-Stainless-Arch\": normalizeArch(process.arch),\n            \"X-Stainless-Runtime\": \"node\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": \"unknown\",\n            \"X-Stainless-Runtime\": `browser:${browserInfo.browser}`,\n            \"X-Stainless-Runtime-Version\": browserInfo.version\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        \"X-Stainless-Lang\": \"js\",\n        \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n        \"X-Stainless-OS\": \"Unknown\",\n        \"X-Stainless-Arch\": \"unknown\",\n        \"X-Stainless-Runtime\": \"unknown\",\n        \"X-Stainless-Runtime-Version\": \"unknown\"\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === \"undefined\" || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        {\n            key: \"edge\",\n            pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"chrome\",\n            pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"firefox\",\n            pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"safari\",\n            pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n        }\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns){\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return {\n                browser: key,\n                version: `${major}.${minor}.${patch}`\n            };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch)=>{\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === \"x32\") return \"x32\";\n    if (arch === \"x86_64\" || arch === \"x64\") return \"x64\";\n    if (arch === \"arm\") return \"arm\";\n    if (arch === \"aarch64\" || arch === \"arm64\") return \"arm64\";\n    if (arch) return `other:${arch}`;\n    return \"unknown\";\n};\nconst normalizePlatform = (platform)=>{\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes(\"ios\")) return \"iOS\";\n    if (platform === \"android\") return \"Android\";\n    if (platform === \"darwin\") return \"MacOS\";\n    if (platform === \"win32\") return \"Windows\";\n    if (platform === \"freebsd\") return \"FreeBSD\";\n    if (platform === \"openbsd\") return \"OpenBSD\";\n    if (platform === \"linux\") return \"Linux\";\n    if (platform) return `Other:${platform}`;\n    return \"Unknown\";\n};\nlet _platformHeaders;\nconst getPlatformHeaders = ()=>{\n    return _platformHeaders ?? (_platformHeaders = getPlatformProperties());\n};\nconst safeJSON = (text)=>{\n    try {\n        return JSON.parse(text);\n    } catch (err) {\n        return undefined;\n    }\n};\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nconst isAbsoluteURL = (url)=>{\n    return startsWithSchemeRegexp.test(url);\n};\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n)=>{\n    if (typeof n !== \"number\" || !Number.isInteger(n)) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.GroqError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.GroqError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nconst castToError = (err)=>{\n    if (err instanceof Error) return err;\n    if (typeof err === \"object\" && err !== null) {\n        try {\n            return new Error(JSON.stringify(err));\n        } catch  {}\n    }\n    return new Error(err);\n};\nconst ensurePresent = (value)=>{\n    if (value == null) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.GroqError(`Expected a value to be given but received ${value} instead.`);\n    return value;\n};\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */ const readEnv = (env)=>{\n    if (typeof process !== \"undefined\") {\n        return process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof Deno !== \"undefined\") {\n        return Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n};\nconst coerceInteger = (value)=>{\n    if (typeof value === \"number\") return Math.round(value);\n    if (typeof value === \"string\") return parseInt(value, 10);\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.GroqError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceFloat = (value)=>{\n    if (typeof value === \"number\") return value;\n    if (typeof value === \"string\") return parseFloat(value);\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.GroqError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceBoolean = (value)=>{\n    if (typeof value === \"boolean\") return value;\n    if (typeof value === \"string\") return value === \"true\";\n    return Boolean(value);\n};\nconst maybeCoerceInteger = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nconst maybeCoerceFloat = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nconst maybeCoerceBoolean = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n    if (!obj) return true;\n    for(const _k in obj)return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */ function applyHeadersMut(targetHeaders, newHeaders) {\n    for(const k in newHeaders){\n        if (!hasOwn(newHeaders, k)) continue;\n        const lowerKey = k.toLowerCase();\n        if (!lowerKey) continue;\n        const val = newHeaders[k];\n        if (val === null) {\n            delete targetHeaders[lowerKey];\n        } else if (val !== undefined) {\n            targetHeaders[lowerKey] = val;\n        }\n    }\n}\nfunction debug(action, ...args) {\n    if (typeof process !== \"undefined\" && process?.env?.[\"DEBUG\"] === \"true\") {\n        console.log(`Groq:DEBUG:${action}`, ...args);\n    }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */ const uuid4 = ()=>{\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0;\n        const v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n};\nconst isRunningInBrowser = ()=>{\n    return(// @ts-ignore\n     false && // @ts-ignore\n    0);\n};\nconst isHeadersProtocol = (headers)=>{\n    return typeof headers?.get === \"function\";\n};\nconst getRequiredHeader = (headers, header)=>{\n    const foundHeader = getHeader(headers, header);\n    if (foundHeader === undefined) {\n        throw new Error(`Could not find ${header} header`);\n    }\n    return foundHeader;\n};\nconst getHeader = (headers, header)=>{\n    const lowerCasedHeader = header.toLowerCase();\n    if (isHeadersProtocol(headers)) {\n        // to deal with the case where the header looks like Stainless-Event-Id\n        const intercapsHeader = header[0]?.toUpperCase() + header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2)=>g1 + g2.toUpperCase());\n        for (const key of [\n            header,\n            lowerCasedHeader,\n            header.toUpperCase(),\n            intercapsHeader\n        ]){\n            const value = headers.get(key);\n            if (value) {\n                return value;\n            }\n        }\n    }\n    for (const [key, value] of Object.entries(headers)){\n        if (key.toLowerCase() === lowerCasedHeader) {\n            if (Array.isArray(value)) {\n                if (value.length <= 1) return value[0];\n                console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n                return value[0];\n            }\n            return value;\n        }\n    }\n    return undefined;\n};\n/**\n * Encodes a string to Base64 format.\n */ const toBase64 = (str)=>{\n    if (!str) return \"\";\n    if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(str).toString(\"base64\");\n    }\n    if (typeof btoa !== \"undefined\") {\n        return btoa(str);\n    }\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.GroqError(\"Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined\");\n};\nfunction isObj(obj) {\n    return obj != null && typeof obj === \"object\" && !Array.isArray(obj);\n} //# sourceMappingURL=core.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/core.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/error.mjs":
/*!*********************************************!*\
  !*** ../../node_modules/groq-sdk/error.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   GroqError: () => (/* binding */ GroqError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/../../node_modules/groq-sdk/core.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass GroqError extends Error {\n}\nclass APIError extends GroqError {\n    constructor(status, error, message, headers){\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        this.error = error;\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ? typeof error.message === \"string\" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return \"(no status code or body)\";\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status || !headers) {\n            return new APIConnectionError({\n                message,\n                cause: (0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse)\n            });\n        }\n        const error = errorResponse;\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nclass APIUserAbortError extends APIError {\n    constructor({ message } = {}){\n        super(undefined, undefined, message || \"Request was aborted.\", undefined);\n    }\n}\nclass APIConnectionError extends APIError {\n    constructor({ message, cause }){\n        super(undefined, undefined, message || \"Connection error.\", undefined);\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause) this.cause = cause;\n    }\n}\nclass APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}){\n        super({\n            message: message ?? \"Request timed out.\"\n        });\n    }\n}\nclass BadRequestError extends APIError {\n}\nclass AuthenticationError extends APIError {\n}\nclass PermissionDeniedError extends APIError {\n}\nclass NotFoundError extends APIError {\n}\nclass ConflictError extends APIError {\n}\nclass UnprocessableEntityError extends APIError {\n}\nclass RateLimitError extends APIError {\n}\nclass InternalServerError extends APIError {\n} //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/error.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/index.mjs":
/*!*********************************************!*\
  !*** ../../node_modules/groq-sdk/index.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError),\n/* harmony export */   APIUserAbortError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.BadRequestError),\n/* harmony export */   ConflictError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ConflictError),\n/* harmony export */   Groq: () => (/* binding */ Groq),\n/* harmony export */   GroqError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.GroqError),\n/* harmony export */   InternalServerError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InternalServerError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.NotFoundError),\n/* harmony export */   PermissionDeniedError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.UnprocessableEntityError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_10__.fileFromPath),\n/* harmony export */   toFile: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_9__.toFile)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/../../node_modules/groq-sdk/core.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/../../node_modules/groq-sdk/error.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/../../node_modules/groq-sdk/uploads.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/../../node_modules/groq-sdk/_shims/index.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resources/completions.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/completions.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources/chat/chat.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/chat/chat.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resources/embeddings.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/embeddings.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resources/audio/audio.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/audio/audio.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resources/models.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/models.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./resources/batches.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/batches.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./resources/files.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/files.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _Groq_instances, _a, _Groq_baseURLOverridden;\n\n\n\n\n\n\n\n\n\n\n\n/**\n * API Client for interfacing with the Groq API.\n */ class Groq extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.APIClient {\n    /**\n     * API Client for interfacing with the Groq API.\n     *\n     * @param {string | undefined} [opts.apiKey=process.env['GROQ_API_KEY'] ?? undefined]\n     * @param {string} [opts.baseURL=process.env['GROQ_BASE_URL'] ?? https://api.groq.com] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */ constructor({ baseURL = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"GROQ_BASE_URL\"), apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"GROQ_API_KEY\"), ...opts } = {}){\n        if (apiKey === undefined) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.GroqError(\"The GROQ_API_KEY environment variable is missing or empty; either provide it, or instantiate the Groq client with an apiKey option, like new Groq({ apiKey: 'My API Key' }).\");\n        }\n        const options = {\n            apiKey,\n            ...opts,\n            baseURL: baseURL || `https://api.groq.com`\n        };\n        if (!options.dangerouslyAllowBrowser && _core_mjs__WEBPACK_IMPORTED_MODULE_0__.isRunningInBrowser()) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.GroqError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew Groq({ apiKey, dangerouslyAllowBrowser: true })\");\n        }\n        super({\n            baseURL: options.baseURL,\n            baseURLOverridden: baseURL ? baseURL !== \"https://api.groq.com\" : false,\n            timeout: options.timeout ?? 60000 /* 1 minute */ ,\n            httpAgent: options.httpAgent,\n            maxRetries: options.maxRetries,\n            fetch: options.fetch\n        });\n        _Groq_instances.add(this);\n        this.completions = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions(this);\n        this.chat = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Chat(this);\n        this.embeddings = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Embeddings(this);\n        this.audio = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Audio(this);\n        this.models = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Models(this);\n        this.batches = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Batches(this);\n        this.files = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Files(this);\n        this._options = options;\n        this.apiKey = apiKey;\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    defaultHeaders(opts) {\n        return {\n            ...super.defaultHeaders(opts),\n            ...this._options.defaultHeaders\n        };\n    }\n    authHeaders(opts) {\n        return {\n            Authorization: `Bearer ${this.apiKey}`\n        };\n    }\n}\n_a = Groq, _Groq_instances = new WeakSet(), _Groq_baseURLOverridden = function _Groq_baseURLOverridden() {\n    return this.baseURL !== \"https://api.groq.com\";\n};\nGroq.Groq = _a;\nGroq.DEFAULT_TIMEOUT = 60000; // 1 minute\nGroq.GroqError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.GroqError;\nGroq.APIError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError;\nGroq.APIConnectionError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionError;\nGroq.APIConnectionTimeoutError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionTimeoutError;\nGroq.APIUserAbortError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError;\nGroq.NotFoundError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.NotFoundError;\nGroq.ConflictError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ConflictError;\nGroq.RateLimitError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.RateLimitError;\nGroq.BadRequestError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.BadRequestError;\nGroq.AuthenticationError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationError;\nGroq.InternalServerError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InternalServerError;\nGroq.PermissionDeniedError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.PermissionDeniedError;\nGroq.UnprocessableEntityError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.UnprocessableEntityError;\nGroq.toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_9__.toFile;\nGroq.fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_10__.fileFromPath;\nGroq.Completions = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions;\nGroq.Chat = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Chat;\nGroq.Embeddings = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Embeddings;\nGroq.Audio = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Audio;\nGroq.Models = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Models;\nGroq.Batches = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Batches;\nGroq.Files = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Files;\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Groq); //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/lib/streaming.mjs":
/*!*****************************************************!*\
  !*** ../../node_modules/groq-sdk/lib/streaming.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   readableStreamAsyncIterable: () => (/* binding */ readableStreamAsyncIterable)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_shims/index.mjs */ \"(rsc)/../../node_modules/groq-sdk/_shims/index.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/../../node_modules/groq-sdk/error.mjs\");\n\n\n\nclass Stream {\n    constructor(iterator, controller){\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        const decoder = new SSEDecoder();\n        async function* iterMessages() {\n            if (!response.body) {\n                controller.abort();\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.GroqError(`Attempted to iterate over a response with no body`);\n            }\n            const lineDecoder = new LineDecoder();\n            const iter = readableStreamAsyncIterable(response.body);\n            for await (const chunk of iter){\n                for (const line of lineDecoder.decode(chunk)){\n                    const sse = decoder.decode(line);\n                    if (sse) yield sse;\n                }\n            }\n            for (const line of lineDecoder.flush()){\n                const sse = decoder.decode(line);\n                if (sse) yield sse;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of iterMessages()){\n                    if (done) continue;\n                    if (sse.data.startsWith(\"[DONE]\")) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null || sse.event === \"error\") {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        } catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        if (data && data.error) {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(data.error.status_code, data.error, data.error.message, undefined);\n                        }\n                        yield data;\n                    }\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === \"AbortError\") return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */ static fromReadableStream(readableStream, controller) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new LineDecoder();\n            const iter = readableStreamAsyncIterable(readableStream);\n            for await (const chunk of iter){\n                for (const line of lineDecoder.decode(chunk)){\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()){\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()){\n                    if (done) continue;\n                    if (line) yield JSON.parse(line);\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === \"AbortError\") return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */ tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue)=>{\n            return {\n                next: ()=>{\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                }\n            };\n        };\n        return [\n            new Stream(()=>teeIterator(left), this.controller),\n            new Stream(()=>teeIterator(right), this.controller)\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */ toReadableStream() {\n        const self = this;\n        let iter;\n        const encoder = new TextEncoder();\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream({\n            async start () {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull (ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done) return ctrl.close();\n                    const bytes = encoder.encode(JSON.stringify(value) + \"\\n\");\n                    ctrl.enqueue(bytes);\n                } catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel () {\n                await iter.return?.();\n            }\n        });\n    }\n}\nclass SSEDecoder {\n    constructor(){\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith(\"\\r\")) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length) return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join(\"\\n\"),\n                raw: this.chunks\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(\":\")) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, \":\");\n        if (value.startsWith(\" \")) {\n            value = value.substring(1);\n        }\n        if (fieldname === \"event\") {\n            this.event = value;\n        } else if (fieldname === \"data\") {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */ class LineDecoder {\n    constructor(){\n        this.buffer = [];\n        this.trailingCR = false;\n    }\n    decode(chunk) {\n        let text = this.decodeText(chunk);\n        if (this.trailingCR) {\n            text = \"\\r\" + text;\n            this.trailingCR = false;\n        }\n        if (text.endsWith(\"\\r\")) {\n            this.trailingCR = true;\n            text = text.slice(0, -1);\n        }\n        if (!text) {\n            return [];\n        }\n        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || \"\");\n        let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n        if (lines.length === 1 && !trailingNewline) {\n            this.buffer.push(lines[0]);\n            return [];\n        }\n        if (this.buffer.length > 0) {\n            lines = [\n                this.buffer.join(\"\") + lines[0],\n                ...lines.slice(1)\n            ];\n            this.buffer = [];\n        }\n        if (!trailingNewline) {\n            this.buffer = [\n                lines.pop() || \"\"\n            ];\n        }\n        return lines;\n    }\n    decodeText(bytes) {\n        if (bytes == null) return \"\";\n        if (typeof bytes === \"string\") return bytes;\n        // Node:\n        if (typeof Buffer !== \"undefined\") {\n            if (bytes instanceof Buffer) {\n                return bytes.toString();\n            }\n            if (bytes instanceof Uint8Array) {\n                return Buffer.from(bytes).toString();\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.GroqError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n        }\n        // Browser\n        if (typeof TextDecoder !== \"undefined\") {\n            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n                this.textDecoder ?? (this.textDecoder = new TextDecoder(\"utf8\"));\n                return this.textDecoder.decode(bytes);\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.GroqError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n        }\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.GroqError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n    }\n    flush() {\n        if (!this.buffer.length && !this.trailingCR) {\n            return [];\n        }\n        const lines = [\n            this.buffer.join(\"\")\n        ];\n        this.buffer = [];\n        this.trailingCR = false;\n        return lines;\n    }\n}\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set([\n    \"\\n\",\n    \"\\r\",\n    \"\\v\",\n    \"\\f\",\n    \"\\x1c\",\n    \"\\x1d\",\n    \"\\x1e\",\n    \"\\x85\",\n    \"\\u2028\",\n    \"\\u2029\"\n]);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [\n            str.substring(0, index),\n            delimiter,\n            str.substring(index + delimiter.length)\n        ];\n    }\n    return [\n        str,\n        \"\",\n        \"\"\n    ];\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ function readableStreamAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator]) return stream;\n    const reader = stream.getReader();\n    return {\n        async next () {\n            try {\n                const result = await reader.read();\n                if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            } catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return () {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return {\n                done: true,\n                value: undefined\n            };\n        },\n        [Symbol.asyncIterator] () {\n            return this;\n        }\n    };\n} //# sourceMappingURL=streaming.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL2xpYi9zdHJlYW1pbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDWjtBQUNEO0FBQ2pDLE1BQU1HO0lBQ1RDLFlBQVlDLFFBQVEsRUFBRUMsVUFBVSxDQUFFO1FBQzlCLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLFVBQVUsR0FBR0E7SUFDdEI7SUFDQSxPQUFPQyxnQkFBZ0JDLFFBQVEsRUFBRUYsVUFBVSxFQUFFO1FBQ3pDLElBQUlHLFdBQVc7UUFDZixNQUFNQyxVQUFVLElBQUlDO1FBQ3BCLGdCQUFnQkM7WUFDWixJQUFJLENBQUNKLFNBQVNLLElBQUksRUFBRTtnQkFDaEJQLFdBQVdRLEtBQUs7Z0JBQ2hCLE1BQU0sSUFBSWIsaURBQVNBLENBQUMsQ0FBQyxpREFBaUQsQ0FBQztZQUMzRTtZQUNBLE1BQU1jLGNBQWMsSUFBSUM7WUFDeEIsTUFBTUMsT0FBT0MsNEJBQTRCVixTQUFTSyxJQUFJO1lBQ3RELFdBQVcsTUFBTU0sU0FBU0YsS0FBTTtnQkFDNUIsS0FBSyxNQUFNRyxRQUFRTCxZQUFZTSxNQUFNLENBQUNGLE9BQVE7b0JBQzFDLE1BQU1HLE1BQU1aLFFBQVFXLE1BQU0sQ0FBQ0Q7b0JBQzNCLElBQUlFLEtBQ0EsTUFBTUE7Z0JBQ2Q7WUFDSjtZQUNBLEtBQUssTUFBTUYsUUFBUUwsWUFBWVEsS0FBSyxHQUFJO2dCQUNwQyxNQUFNRCxNQUFNWixRQUFRVyxNQUFNLENBQUNEO2dCQUMzQixJQUFJRSxLQUNBLE1BQU1BO1lBQ2Q7UUFDSjtRQUNBLGdCQUFnQmpCO1lBQ1osSUFBSUksVUFBVTtnQkFDVixNQUFNLElBQUllLE1BQU07WUFDcEI7WUFDQWYsV0FBVztZQUNYLElBQUlnQixPQUFPO1lBQ1gsSUFBSTtnQkFDQSxXQUFXLE1BQU1ILE9BQU9WLGVBQWdCO29CQUNwQyxJQUFJYSxNQUNBO29CQUNKLElBQUlILElBQUlJLElBQUksQ0FBQ0MsVUFB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QVFGLElBQUlHLE9BQU8sQ0FBQ0Y7SUFDMUIsSUFBSUMsVUFBVSxDQUFDLEdBQUc7UUFDZCxPQUFPO1lBQUNGLElBQUl6QixTQUFTLENBQUMsR0FBRzJCO1lBQVFEO1lBQVdELElBQUl6QixTQUFTLENBQUMyQixRQUFRRCxVQUFVaEQsTUFBTTtTQUFFO0lBQ3hGO0lBQ0EsT0FBTztRQUFDK0M7UUFBSztRQUFJO0tBQUc7QUFDeEI7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVMvRSw0QkFBNEJtRixNQUFNO0lBQzlDLElBQUlBLE1BQU0sQ0FBQzNELE9BQU9DLGFBQWEsQ0FBQyxFQUM1QixPQUFPMEQ7SUFDWCxNQUFNQyxTQUFTRCxPQUFPRSxTQUFTO0lBQy9CLE9BQU87UUFDSCxNQUFNdEQ7WUFDRixJQUFJO2dCQUNBLE1BQU1FLFNBQVMsTUFBTW1ELE9BQU9FLElBQUk7Z0JBQ2hDLElBQUlyRCxRQUFRMUIsTUFDUjZFLE9BQU9HLFdBQVcsSUFBSSwwQ0FBMEM7Z0JBQ3BFLE9BQU90RDtZQUNYLEVBQ0EsT0FBT3BCLEdBQUc7Z0JBQ051RSxPQUFPRyxXQUFXLElBQUksMkNBQTJDO2dCQUNqRSxNQUFNMUU7WUFDVjtRQUNKO1FBQ0EsTUFBTXNDO1lBQ0YsTUFBTXFDLGdCQUFnQkosT0FBT2xDLE1BQU07WUFDbkNrQyxPQUFPRyxXQUFXO1lBQ2xCLE1BQU1DO1lBQ04sT0FBTztnQkFBRWpGLE1BQU07Z0JBQU1vQyxPQUFPeEI7WUFBVTtRQUMxQztRQUNBLENBQUNLLE9BQU9DLGFBQWEsQ0FBQztZQUNsQixPQUFPLElBQUk7UUFDZjtJQUNKO0FBQ0osRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeXN0ZW0tcHJvbXB0LXRvb2wtd2ViLy4uLy4uL25vZGVfbW9kdWxlcy9ncm9xLXNkay9saWIvc3RyZWFtaW5nLm1qcz8zMjQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWRhYmxlU3RyZWFtIH0gZnJvbSBcIi4uL19zaGltcy9pbmRleC5tanNcIjtcbmltcG9ydCB7IEdyb3FFcnJvciB9IGZyb20gXCIuLi9lcnJvci5tanNcIjtcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSBcIi4uL2Vycm9yLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoaXRlcmF0b3IsIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy5pdGVyYXRvciA9IGl0ZXJhdG9yO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVNTRVJlc3BvbnNlKHJlc3BvbnNlLCBjb250cm9sbGVyKSB7XG4gICAgICAgIGxldCBjb25zdW1lZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFNTRURlY29kZXIoKTtcbiAgICAgICAgYXN5bmMgZnVuY3Rpb24qIGl0ZXJNZXNzYWdlcygpIHtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2UuYm9keSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgR3JvcUVycm9yKGBBdHRlbXB0ZWQgdG8gaXRlcmF0ZSBvdmVyIGEgcmVzcG9uc2Ugd2l0aCBubyBib2R5YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsaW5lRGVjb2RlciA9IG5ldyBMaW5lRGVjb2RlcigpO1xuICAgICAgICAgICAgY29uc3QgaXRlciA9IHJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYWJsZShyZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgaXRlcikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5kZWNvZGUoY2h1bmspKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNzZSA9IGRlY29kZXIuZGVjb2RlKGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3NlKVxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgc3NlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5mbHVzaCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3NlID0gZGVjb2Rlci5kZWNvZGUobGluZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNzZSlcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgc3NlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uKiBpdGVyYXRvcigpIHtcbiAgICAgICAgICAgIGlmIChjb25zdW1lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGl0ZXJhdGUgb3ZlciBhIGNvbnN1bWVkIHN0cmVhbSwgdXNlIGAudGVlKClgIHRvIHNwbGl0IHRoZSBzdHJlYW0uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdW1lZCA9IHRydWU7XG4gICAgICAgICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHNzZSBvZiBpdGVyTWVzc2FnZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3NlLmRhdGEuc3RhcnRzV2l0aCgnW0RPTkVdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNzZS5ldmVudCA9PT0gbnVsbCB8fCBzc2UuZXZlbnQgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShzc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkIG5vdCBwYXJzZSBtZXNzYWdlIGludG8gSlNPTjpgLCBzc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRnJvbSBjaHVuazpgLCBzc2UucmF3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBUElFcnJvcihkYXRhLmVycm9yLnN0YXR1c19jb2RlLCBkYXRhLmVycm9yLCBkYXRhLmVycm9yLm1lc3NhZ2UsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCBkYXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBjYWxscyBgc3RyZWFtLmNvbnRyb2xsZXIuYWJvcnQoKWAsIHdlIHNob3VsZCBleGl0IHdpdGhvdXQgdGhyb3dpbmcuXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvciAmJiBlLm5hbWUgPT09ICdBYm9ydEVycm9yJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBgYnJlYWtgcywgYWJvcnQgdGhlIG9uZ29pbmcgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICBpZiAoIWRvbmUpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShpdGVyYXRvciwgY29udHJvbGxlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFN0cmVhbSBmcm9tIGEgbmV3bGluZS1zZXBhcmF0ZWQgUmVhZGFibGVTdHJlYW1cbiAgICAgKiB3aGVyZSBlYWNoIGl0ZW0gaXMgYSBKU09OIHZhbHVlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tUmVhZGFibGVTdHJlYW0ocmVhZGFibGVTdHJlYW0sIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgbGV0IGNvbnN1bWVkID0gZmFsc2U7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uKiBpdGVyTGluZXMoKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lRGVjb2RlciA9IG5ldyBMaW5lRGVjb2RlcigpO1xuICAgICAgICAgICAgY29uc3QgaXRlciA9IHJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbSk7XG4gICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGl0ZXIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZURlY29kZXIuZGVjb2RlKGNodW5rKSkge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCBsaW5lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5mbHVzaCgpKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgbGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3luYyBmdW5jdGlvbiogaXRlcmF0b3IoKSB7XG4gICAgICAgICAgICBpZiAoY29uc3VtZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBpdGVyYXRlIG92ZXIgYSBjb25zdW1lZCBzdHJlYW0sIHVzZSBgLnRlZSgpYCB0byBzcGxpdCB0aGUgc3RyZWFtLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3VtZWQgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBsaW5lIG9mIGl0ZXJMaW5lcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb25lKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lKVxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgSlNPTi5wYXJzZShsaW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB1c2VyIGNhbGxzIGBzdHJlYW0uY29udHJvbGxlci5hYm9ydCgpYCwgd2Ugc2hvdWxkIGV4aXQgd2l0aG91dCB0aHJvd2luZy5cbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yICYmIGUubmFtZSA9PT0gJ0Fib3J0RXJyb3InKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB1c2VyIGBicmVha2BzLCBhYm9ydCB0aGUgb25nb2luZyByZXF1ZXN0LlxuICAgICAgICAgICAgICAgIGlmICghZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKGl0ZXJhdG9yLCBjb250cm9sbGVyKTtcbiAgICB9XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BsaXRzIHRoZSBzdHJlYW0gaW50byB0d28gc3RyZWFtcyB3aGljaCBjYW4gYmVcbiAgICAgKiBpbmRlcGVuZGVudGx5IHJlYWQgZnJvbSBhdCBkaWZmZXJlbnQgc3BlZWRzLlxuICAgICAqL1xuICAgIHRlZSgpIHtcbiAgICAgICAgY29uc3QgbGVmdCA9IFtdO1xuICAgICAgICBjb25zdCByaWdodCA9IFtdO1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgY29uc3QgdGVlSXRlcmF0b3IgPSAocXVldWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0LnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBTdHJlYW0oKCkgPT4gdGVlSXRlcmF0b3IobGVmdCksIHRoaXMuY29udHJvbGxlciksXG4gICAgICAgICAgICBuZXcgU3RyZWFtKCgpID0+IHRlZUl0ZXJhdG9yKHJpZ2h0KSwgdGhpcy5jb250cm9sbGVyKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBzdHJlYW0gdG8gYSBuZXdsaW5lLXNlcGFyYXRlZCBSZWFkYWJsZVN0cmVhbSBvZlxuICAgICAqIEpTT04gc3RyaW5naWZpZWQgdmFsdWVzIGluIHRoZSBzdHJlYW1cbiAgICAgKiB3aGljaCBjYW4gYmUgdHVybmVkIGJhY2sgaW50byBhIFN0cmVhbSB3aXRoIGBTdHJlYW0uZnJvbVJlYWRhYmxlU3RyZWFtKClgLlxuICAgICAqL1xuICAgIHRvUmVhZGFibGVTdHJlYW0oKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgaXRlcjtcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICAgIGFzeW5jIHN0YXJ0KCkge1xuICAgICAgICAgICAgICAgIGl0ZXIgPSBzZWxmW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFzeW5jIHB1bGwoY3RybCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IGl0ZXIubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gZW5jb2Rlci5lbmNvZGUoSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmVucXVldWUoYnl0ZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN5bmMgY2FuY2VsKCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGl0ZXIucmV0dXJuPy4oKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmNsYXNzIFNTRURlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmV2ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgfVxuICAgIGRlY29kZShsaW5lKSB7XG4gICAgICAgIGlmIChsaW5lLmVuZHNXaXRoKCdcXHInKSkge1xuICAgICAgICAgICAgbGluZSA9IGxpbmUuc3Vic3RyaW5nKDAsIGxpbmUubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICAvLyBlbXB0eSBsaW5lIGFuZCB3ZSBkaWRuJ3QgcHJldmlvdXNseSBlbmNvdW50ZXIgYW55IG1lc3NhZ2VzXG4gICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnQgJiYgIXRoaXMuZGF0YS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjb25zdCBzc2UgPSB7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IHRoaXMuZXZlbnQsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgICAgIHJhdzogdGhpcy5jaHVua3MsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5ldmVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgICAgICAgICByZXR1cm4gc3NlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2h1bmtzLnB1c2gobGluZSk7XG4gICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoJzonKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IFtmaWVsZG5hbWUsIF8sIHZhbHVlXSA9IHBhcnRpdGlvbihsaW5lLCAnOicpO1xuICAgICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aCgnICcpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmllbGRuYW1lID09PSAnZXZlbnQnKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmllbGRuYW1lID09PSAnZGF0YScpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4vKipcbiAqIEEgcmUtaW1wbGVtZW50YXRpb24gb2YgaHR0cHgncyBgTGluZURlY29kZXJgIGluIFB5dGhvbiB0aGF0IGhhbmRsZXMgaW5jcmVtZW50YWxseVxuICogcmVhZGluZyBsaW5lcyBmcm9tIHRleHQuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9odHRweC9ibG9iLzkyMDMzM2VhOTgxMThlOWNmNjE3ZjI0NjkwNWQ3YjIwMjUxMDk0MWMvaHR0cHgvX2RlY29kZXJzLnB5I0wyNThcbiAqL1xuY2xhc3MgTGluZURlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnRyYWlsaW5nQ1IgPSBmYWxzZTtcbiAgICB9XG4gICAgZGVjb2RlKGNodW5rKSB7XG4gICAgICAgIGxldCB0ZXh0ID0gdGhpcy5kZWNvZGVUZXh0KGNodW5rKTtcbiAgICAgICAgaWYgKHRoaXMudHJhaWxpbmdDUikge1xuICAgICAgICAgICAgdGV4dCA9ICdcXHInICsgdGV4dDtcbiAgICAgICAgICAgIHRoaXMudHJhaWxpbmdDUiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXh0LmVuZHNXaXRoKCdcXHInKSkge1xuICAgICAgICAgICAgdGhpcy50cmFpbGluZ0NSID0gdHJ1ZTtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFpbGluZ05ld2xpbmUgPSBMaW5lRGVjb2Rlci5ORVdMSU5FX0NIQVJTLmhhcyh0ZXh0W3RleHQubGVuZ3RoIC0gMV0gfHwgJycpO1xuICAgICAgICBsZXQgbGluZXMgPSB0ZXh0LnNwbGl0KExpbmVEZWNvZGVyLk5FV0xJTkVfUkVHRVhQKTtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMSAmJiAhdHJhaWxpbmdOZXdsaW5lKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKGxpbmVzWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGluZXMgPSBbdGhpcy5idWZmZXIuam9pbignJykgKyBsaW5lc1swXSwgLi4ubGluZXMuc2xpY2UoMSldO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRyYWlsaW5nTmV3bGluZSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBbbGluZXMucG9wKCkgfHwgJyddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lcztcbiAgICB9XG4gICAgZGVjb2RlVGV4dChieXRlcykge1xuICAgICAgICBpZiAoYnl0ZXMgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgICAgIC8vIE5vZGU6XG4gICAgICAgIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKGJ5dGVzIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ5dGVzKS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEdyb3FFcnJvcihgVW5leHBlY3RlZDogcmVjZWl2ZWQgbm9uLVVpbnQ4QXJyYXkgKCR7Ynl0ZXMuY29uc3RydWN0b3IubmFtZX0pIHN0cmVhbSBjaHVuayBpbiBhbiBlbnZpcm9ubWVudCB3aXRoIGEgZ2xvYmFsIFwiQnVmZmVyXCIgZGVmaW5lZCwgd2hpY2ggdGhpcyBsaWJyYXJ5IGFzc3VtZXMgdG8gYmUgTm9kZS4gUGxlYXNlIHJlcG9ydCB0aGlzIGVycm9yLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEJyb3dzZXJcbiAgICAgICAgaWYgKHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgYnl0ZXMgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dERlY29kZXIgPz8gKHRoaXMudGV4dERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0ZjgnKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dERlY29kZXIuZGVjb2RlKGJ5dGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBHcm9xRXJyb3IoYFVuZXhwZWN0ZWQ6IHJlY2VpdmVkIG5vbi1VaW50OEFycmF5L0FycmF5QnVmZmVyICgke2J5dGVzLmNvbnN0cnVjdG9yLm5hbWV9KSBpbiBhIHdlYiBwbGF0Zm9ybS4gUGxlYXNlIHJlcG9ydCB0aGlzIGVycm9yLmApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBHcm9xRXJyb3IoYFVuZXhwZWN0ZWQ6IG5laXRoZXIgQnVmZmVyIG5vciBUZXh0RGVjb2RlciBhcmUgYXZhaWxhYmxlIGFzIGdsb2JhbHMuIFBsZWFzZSByZXBvcnQgdGhpcyBlcnJvci5gKTtcbiAgICB9XG4gICAgZmx1c2goKSB7XG4gICAgICAgIGlmICghdGhpcy5idWZmZXIubGVuZ3RoICYmICF0aGlzLnRyYWlsaW5nQ1IpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lcyA9IFt0aGlzLmJ1ZmZlci5qb2luKCcnKV07XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHRoaXMudHJhaWxpbmdDUiA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxufVxuLy8gcHJldHRpZXItaWdub3JlXG5MaW5lRGVjb2Rlci5ORVdMSU5FX0NIQVJTID0gbmV3IFNldChbJ1xcbicsICdcXHInLCAnXFx4MGInLCAnXFx4MGMnLCAnXFx4MWMnLCAnXFx4MWQnLCAnXFx4MWUnLCAnXFx4ODUnLCAnXFx1MjAyOCcsICdcXHUyMDI5J10pO1xuTGluZURlY29kZXIuTkVXTElORV9SRUdFWFAgPSAvXFxyXFxufFtcXG5cXHJcXHgwYlxceDBjXFx4MWNcXHgxZFxceDFlXFx4ODVcXHUyMDI4XFx1MjAyOV0vZztcbmZ1bmN0aW9uIHBhcnRpdGlvbihzdHIsIGRlbGltaXRlcikge1xuICAgIGNvbnN0IGluZGV4ID0gc3RyLmluZGV4T2YoZGVsaW1pdGVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBbc3RyLnN1YnN0cmluZygwLCBpbmRleCksIGRlbGltaXRlciwgc3RyLnN1YnN0cmluZyhpbmRleCArIGRlbGltaXRlci5sZW5ndGgpXTtcbiAgICB9XG4gICAgcmV0dXJuIFtzdHIsICcnLCAnJ107XG59XG4vKipcbiAqIE1vc3QgYnJvd3NlcnMgZG9uJ3QgeWV0IGhhdmUgYXN5bmMgaXRlcmFibGUgc3VwcG9ydCBmb3IgUmVhZGFibGVTdHJlYW0sXG4gKiBhbmQgTm9kZSBoYXMgYSB2ZXJ5IGRpZmZlcmVudCB3YXkgb2YgcmVhZGluZyBieXRlcyBmcm9tIGl0cyBcIlJlYWRhYmxlU3RyZWFtXCIuXG4gKlxuICogVGhpcyBwb2x5ZmlsbCB3YXMgcHVsbGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL01hdHRpYXNCdWVsZW5zL3dlYi1zdHJlYW1zLXBvbHlmaWxsL3B1bGwvMTIyI2lzc3VlY29tbWVudC0xNjI3MzU0NDkwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmFibGUoc3RyZWFtKSB7XG4gICAgaWYgKHN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pXG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFzeW5jIG5leHQoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdD8uZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayB3aGVuIHN0cmVhbSBiZWNvbWVzIGNsb3NlZFxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgd2hlbiBzdHJlYW0gYmVjb21lcyBlcnJvcmVkXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgcmV0dXJuKCkge1xuICAgICAgICAgICAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IHJlYWRlci5jYW5jZWwoKTtcbiAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgYXdhaXQgY2FuY2VsUHJvbWlzZTtcbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgfSxcbiAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1pbmcubWpzLm1hcCJdLCJuYW1lcyI6WyJSZWFkYWJsZVN0cmVhbSIsIkdyb3FFcnJvciIsIkFQSUVycm9yIiwiU3RyZWFtIiwiY29uc3RydWN0b3IiLCJpdGVyYXRvciIsImNvbnRyb2xsZXIiLCJmcm9tU1NFUmVzcG9uc2UiLCJyZXNwb25zZSIsImNvbnN1bWVkIiwiZGVjb2RlciIsIlNTRURlY29kZXIiLCJpdGVyTWVzc2FnZXMiLCJib2R5IiwiYWJvcnQiLCJsaW5lRGVjb2RlciIsIkxpbmVEZWNvZGVyIiwiaXRlciIsInJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYWJsZSIsImNodW5rIiwibGluZSIsImRlY29kZSIsInNzZSIsImZsdXNoIiwiRXJyb3IiLCJkb25lIiwiZGF0YSIsInN0YXJ0c1dpdGgiLCJldmVudCIsIkpTT04iLCJwYXJzZSIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJyYXciLCJzdGF0dXNfY29kZSIsIm1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJuYW1lIiwiZnJvbVJlYWRhYmxlU3RyZWFtIiwicmVhZGFibGVTdHJlYW0iLCJpdGVyTGluZXMiLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidGVlIiwibGVmdCIsInJpZ2h0IiwidGVlSXRlcmF0b3IiLCJxdWV1ZSIsIm5leHQiLCJsZW5ndGgiLCJyZXN1bHQiLCJwdXNoIiwic2hpZnQiLCJ0b1JlYWRhYmxlU3RyZWFtIiwic2VsZiIsImVuY29kZXIiLCJUZXh0RW5jb2RlciIsInN0YXJ0IiwicHVsbCIsImN0cmwiLCJ2YWx1ZSIsImNsb3NlIiwiYnl0ZXMiLCJlbmNvZGUiLCJzdHJpbmdpZnkiLCJlbnF1ZXVlIiwiZXJyIiwiY2FuY2VsIiwicmV0dXJuIiwiY2h1bmtzIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJqb2luIiwiZmllbGRuYW1lIiwiXyIsInBhcnRpdGlvbiIsImJ1ZmZlciIsInRyYWlsaW5nQ1IiLCJ0ZXh0IiwiZGVjb2RlVGV4dCIsInNsaWNlIiwidHJhaWxpbmdOZXdsaW5lIiwiTkVXTElORV9DSEFSUyIsImhhcyIsImxpbmVzIiwic3BsaXQiLCJORVdMSU5FX1JFR0VYUCIsInBvcCIsIkJ1ZmZlciIsInRvU3RyaW5nIiwiVWludDhBcnJheSIsImZyb20iLCJUZXh0RGVjb2RlciIsIkFycmF5QnVmZmVyIiwidGV4dERlY29kZXIiLCJTZXQiLCJzdHIiLCJkZWxpbWl0ZXIiLCJpbmRleCIsImluZGV4T2YiLCJzdHJlYW0iLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWFkIiwicmVsZWFzZUxvY2siLCJjYW5jZWxQcm9taXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/lib/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resource.mjs":
/*!************************************************!*\
  !*** ../../node_modules/groq-sdk/resource.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: () => (/* binding */ APIResource)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nclass APIResource {\n    constructor(client){\n        this._client = client;\n    }\n} //# sourceMappingURL=resource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsc0ZBQXNGO0FBQy9FLE1BQU1BO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixJQUFJLENBQUNDLE9BQU8sR0FBR0Q7SUFDbkI7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N5c3RlbS1wcm9tcHQtdG9vbC13ZWIvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlLm1qcz85OTk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgY2xhc3MgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgICAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb3VyY2UubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImNvbnN0cnVjdG9yIiwiY2xpZW50IiwiX2NsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resource.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/audio/audio.mjs":
/*!*************************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/audio/audio.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* binding */ Audio)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n/* harmony import */ var _speech_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./speech.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/audio/speech.mjs\");\n/* harmony import */ var _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transcriptions.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/audio/transcriptions.mjs\");\n/* harmony import */ var _translations_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./translations.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/audio/translations.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Audio extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.speech = new _speech_mjs__WEBPACK_IMPORTED_MODULE_1__.Speech(this._client);\n        this.transcriptions = new _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_2__.Transcriptions(this._client);\n        this.translations = new _translations_mjs__WEBPACK_IMPORTED_MODULE_3__.Translations(this._client);\n    }\n}\nAudio.Speech = _speech_mjs__WEBPACK_IMPORTED_MODULE_1__.Speech;\nAudio.Transcriptions = _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_2__.Transcriptions;\nAudio.Translations = _translations_mjs__WEBPACK_IMPORTED_MODULE_3__.Translations; //# sourceMappingURL=audio.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9hdWRpby9hdWRpby5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDckM7QUFDUDtBQUNKO0FBQ29CO0FBQ0o7QUFDQTtBQUNKO0FBQzNDLE1BQU1PLGNBQWNQLHNEQUFXQTtJQUNsQ1EsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJVCwrQ0FBZ0IsQ0FBQyxJQUFJLENBQUNVLE9BQU87UUFDL0MsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSVQsK0RBQWdDLENBQUMsSUFBSSxDQUFDUSxPQUFPO1FBQ3ZFLElBQUksQ0FBQ0UsWUFBWSxHQUFHLElBQUlSLDJEQUE0QixDQUFDLElBQUksQ0FBQ00sT0FBTztJQUNyRTtBQUNKO0FBQ0FKLE1BQU1MLE1BQU0sR0FBR0EsK0NBQU1BO0FBQ3JCSyxNQUFNSCxjQUFjLEdBQUdBLCtEQUFjQTtBQUNyQ0csTUFBTUQsWUFBWSxHQUFHQSwyREFBWUEsRUFDakMsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3lzdGVtLXByb21wdC10b29sLXdlYi8uLi8uLi9ub2RlX21vZHVsZXMvZ3JvcS1zZGsvcmVzb3VyY2VzL2F1ZGlvL2F1ZGlvLm1qcz9hNzEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIFNwZWVjaEFQSSBmcm9tIFwiLi9zcGVlY2gubWpzXCI7XG5pbXBvcnQgeyBTcGVlY2ggfSBmcm9tIFwiLi9zcGVlY2gubWpzXCI7XG5pbXBvcnQgKiBhcyBUcmFuc2NyaXB0aW9uc0FQSSBmcm9tIFwiLi90cmFuc2NyaXB0aW9ucy5tanNcIjtcbmltcG9ydCB7IFRyYW5zY3JpcHRpb25zIH0gZnJvbSBcIi4vdHJhbnNjcmlwdGlvbnMubWpzXCI7XG5pbXBvcnQgKiBhcyBUcmFuc2xhdGlvbnNBUEkgZnJvbSBcIi4vdHJhbnNsYXRpb25zLm1qc1wiO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHJhbnNsYXRpb25zLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEF1ZGlvIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnNwZWVjaCA9IG5ldyBTcGVlY2hBUEkuU3BlZWNoKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMudHJhbnNjcmlwdGlvbnMgPSBuZXcgVHJhbnNjcmlwdGlvbnNBUEkuVHJhbnNjcmlwdGlvbnModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy50cmFuc2xhdGlvbnMgPSBuZXcgVHJhbnNsYXRpb25zQVBJLlRyYW5zbGF0aW9ucyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkF1ZGlvLlNwZWVjaCA9IFNwZWVjaDtcbkF1ZGlvLlRyYW5zY3JpcHRpb25zID0gVHJhbnNjcmlwdGlvbnM7XG5BdWRpby5UcmFuc2xhdGlvbnMgPSBUcmFuc2xhdGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpby5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiU3BlZWNoQVBJIiwiU3BlZWNoIiwiVHJhbnNjcmlwdGlvbnNBUEkiLCJUcmFuc2NyaXB0aW9ucyIsIlRyYW5zbGF0aW9uc0FQSSIsIlRyYW5zbGF0aW9ucyIsIkF1ZGlvIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJzcGVlY2giLCJfY2xpZW50IiwidHJhbnNjcmlwdGlvbnMiLCJ0cmFuc2xhdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/audio/audio.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/audio/speech.mjs":
/*!**************************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/audio/speech.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Speech: () => (/* binding */ Speech)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Speech extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Generates audio from the input text.\n     *\n     * @example\n     * ```ts\n     * const speech = await client.audio.speech.create({\n     *   input: 'The quick brown fox jumped over the lazy dog',\n     *   model: 'playai-tts',\n     *   voice: 'Fritz-PlayAI',\n     * });\n     *\n     * const content = await speech.blob();\n     * console.log(content);\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/openai/v1/audio/speech\", {\n            body,\n            ...options,\n            headers: {\n                Accept: \"audio/wav\",\n                ...options?.headers\n            },\n            __binaryResponse: true\n        });\n    }\n} //# sourceMappingURL=speech.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9hdWRpby9zcGVlY2gubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3JDO0FBQzFDLE1BQU1DLGVBQWVELHNEQUFXQTtJQUNuQzs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsMkJBQTJCO1lBQ2hESDtZQUNBLEdBQUdDLE9BQU87WUFDVkcsU0FBUztnQkFBRUMsUUFBUTtnQkFBYSxHQUFHSixTQUFTRyxPQUFPO1lBQUM7WUFDcERFLGtCQUFrQjtRQUN0QjtJQUNKO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeXN0ZW0tcHJvbXB0LXRvb2wtd2ViLy4uLy4uL25vZGVfbW9kdWxlcy9ncm9xLXNkay9yZXNvdXJjZXMvYXVkaW8vc3BlZWNoLm1qcz8zYzQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBTcGVlY2ggZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGF1ZGlvIGZyb20gdGhlIGlucHV0IHRleHQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3Qgc3BlZWNoID0gYXdhaXQgY2xpZW50LmF1ZGlvLnNwZWVjaC5jcmVhdGUoe1xuICAgICAqICAgaW5wdXQ6ICdUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZycsXG4gICAgICogICBtb2RlbDogJ3BsYXlhaS10dHMnLFxuICAgICAqICAgdm9pY2U6ICdGcml0ei1QbGF5QUknLFxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc3QgY29udGVudCA9IGF3YWl0IHNwZWVjaC5ibG9iKCk7XG4gICAgICogY29uc29sZS5sb2coY29udGVudCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvb3BlbmFpL3YxL2F1ZGlvL3NwZWVjaCcsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyBBY2NlcHQ6ICdhdWRpby93YXYnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgICAgICBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGVlY2gubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlNwZWVjaCIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJoZWFkZXJzIiwiQWNjZXB0IiwiX19iaW5hcnlSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/audio/speech.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/audio/transcriptions.mjs":
/*!**********************************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/audio/transcriptions.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transcriptions: () => (/* binding */ Transcriptions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/../../node_modules/groq-sdk/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Transcriptions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Transcribes audio into the input language.\n     *\n     * @example\n     * ```ts\n     * const transcription =\n     *   await client.audio.transcriptions.create({\n     *     model: 'whisper-large-v3-turbo',\n     *   });\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/openai/v1/audio/transcriptions\", _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n            body,\n            ...options\n        }));\n    }\n} //# sourceMappingURL=transcriptions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3JDO0FBQ1Y7QUFDaEMsTUFBTUUsdUJBQXVCRixzREFBV0E7SUFDM0M7Ozs7Ozs7Ozs7S0FVQyxHQUNERyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsbUNBQW1DTixrRUFBZ0MsQ0FBQztZQUFFRztZQUFNLEdBQUdDLE9BQU87UUFBQztJQUNwSDtBQUNKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3lzdGVtLXByb21wdC10b29sLXdlYi8uLi8uLi9ub2RlX21vZHVsZXMvZ3JvcS1zZGsvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zY3JpcHRpb25zLm1qcz8yMzcyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIENvcmUgZnJvbSBcIi4uLy4uL2NvcmUubWpzXCI7XG5leHBvcnQgY2xhc3MgVHJhbnNjcmlwdGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogVHJhbnNjcmliZXMgYXVkaW8gaW50byB0aGUgaW5wdXQgbGFuZ3VhZ2UuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgdHJhbnNjcmlwdGlvbiA9XG4gICAgICogICBhd2FpdCBjbGllbnQuYXVkaW8udHJhbnNjcmlwdGlvbnMuY3JlYXRlKHtcbiAgICAgKiAgICAgbW9kZWw6ICd3aGlzcGVyLWxhcmdlLXYzLXR1cmJvJyxcbiAgICAgKiAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL29wZW5haS92MS9hdWRpby90cmFuc2NyaXB0aW9ucycsIENvcmUubXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNjcmlwdGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkNvcmUiLCJUcmFuc2NyaXB0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/audio/transcriptions.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/audio/translations.mjs":
/*!********************************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/audio/translations.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Translations: () => (/* binding */ Translations)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/../../node_modules/groq-sdk/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Translations extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Translates audio into English.\n     *\n     * @example\n     * ```ts\n     * const translation = await client.audio.translations.create({\n     *   model: 'whisper-large-v3-turbo',\n     * });\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/openai/v1/audio/translations\", _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n            body,\n            ...options\n        }));\n    }\n} //# sourceMappingURL=translations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9hdWRpby90cmFuc2xhdGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNyQztBQUNWO0FBQ2hDLE1BQU1FLHFCQUFxQkYsc0RBQVdBO0lBQ3pDOzs7Ozs7Ozs7S0FTQyxHQUNERyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsaUNBQWlDTixrRUFBZ0MsQ0FBQztZQUFFRztZQUFNLEdBQUdDLE9BQU87UUFBQztJQUNsSDtBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3lzdGVtLXByb21wdC10b29sLXdlYi8uLi8uLi9ub2RlX21vZHVsZXMvZ3JvcS1zZGsvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zbGF0aW9ucy5tanM/ZTYwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gXCIuLi8uLi9jb3JlLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIGF1ZGlvIGludG8gRW5nbGlzaC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCB0cmFuc2xhdGlvbiA9IGF3YWl0IGNsaWVudC5hdWRpby50cmFuc2xhdGlvbnMuY3JlYXRlKHtcbiAgICAgKiAgIG1vZGVsOiAnd2hpc3Blci1sYXJnZS12My10dXJibycsXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvb3BlbmFpL3YxL2F1ZGlvL3RyYW5zbGF0aW9ucycsIENvcmUubXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNsYXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb3JlIiwiVHJhbnNsYXRpb25zIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/audio/translations.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/batches.mjs":
/*!*********************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/batches.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batches: () => (/* binding */ Batches)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Batches extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates and executes a batch from an uploaded file of requests.\n     * [Learn more](/docs/batch).\n     */ create(body, options) {\n        return this._client.post(\"/openai/v1/batches\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Retrieves a batch.\n     */ retrieve(batchId, options) {\n        return this._client.get(`/openai/v1/batches/${batchId}`, options);\n    }\n    /**\n     * List your organization's batches.\n     */ list(options) {\n        return this._client.get(\"/openai/v1/batches\", options);\n    }\n    /**\n     * Cancels a batch.\n     */ cancel(batchId, options) {\n        return this._client.post(`/openai/v1/batches/${batchId}/cancel`, options);\n    }\n} //# sourceMappingURL=batches.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9iYXRjaGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNGQUFzRjtBQUN4QztBQUN2QyxNQUFNQyxnQkFBZ0JELHNEQUFXQTtJQUNwQzs7O0tBR0MsR0FDREUsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHNCQUFzQjtZQUFFSDtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUN0RTtJQUNBOztLQUVDLEdBQ0RHLFNBQVNDLE9BQU8sRUFBRUosT0FBTyxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixFQUFFRCxRQUFRLENBQUMsRUFBRUo7SUFDN0Q7SUFDQTs7S0FFQyxHQUNETSxLQUFLTixPQUFPLEVBQUU7UUFDVixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDSSxHQUFHLENBQUMsc0JBQXNCTDtJQUNsRDtJQUNBOztLQUVDLEdBQ0RPLE9BQU9ILE9BQU8sRUFBRUosT0FBTyxFQUFFO1FBQ3JCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLG1CQUFtQixFQUFFRSxRQUFRLE9BQU8sQ0FBQyxFQUFFSjtJQUNyRTtBQUNKLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3lzdGVtLXByb21wdC10b29sLXdlYi8uLi8uLi9ub2RlX21vZHVsZXMvZ3JvcS1zZGsvcmVzb3VyY2VzL2JhdGNoZXMubWpzP2IwNTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL3Jlc291cmNlLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEJhdGNoZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgZXhlY3V0ZXMgYSBiYXRjaCBmcm9tIGFuIHVwbG9hZGVkIGZpbGUgb2YgcmVxdWVzdHMuXG4gICAgICogW0xlYXJuIG1vcmVdKC9kb2NzL2JhdGNoKS5cbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9vcGVuYWkvdjEvYmF0Y2hlcycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgYmF0Y2guXG4gICAgICovXG4gICAgcmV0cmlldmUoYmF0Y2hJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL29wZW5haS92MS9iYXRjaGVzLyR7YmF0Y2hJZH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCB5b3VyIG9yZ2FuaXphdGlvbidzIGJhdGNoZXMuXG4gICAgICovXG4gICAgbGlzdChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KCcvb3BlbmFpL3YxL2JhdGNoZXMnLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhIGJhdGNoLlxuICAgICAqL1xuICAgIGNhbmNlbChiYXRjaElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL29wZW5haS92MS9iYXRjaGVzLyR7YmF0Y2hJZH0vY2FuY2VsYCwgb3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmF0Y2hlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQmF0Y2hlcyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJyZXRyaWV2ZSIsImJhdGNoSWQiLCJnZXQiLCJsaXN0IiwiY2FuY2VsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/batches.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/chat/chat.mjs":
/*!***********************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/chat/chat.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/../../node_modules/groq-sdk/resources/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Chat extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.completions = new _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n    }\n}\nChat.Completions = _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions; //# sourceMappingURL=chat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9jaGF0L2NoYXQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNyQztBQUNHO0FBQ0g7QUFDMUMsTUFBTUcsYUFBYUgsc0RBQVdBO0lBQ2pDSSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlMLHlEQUEwQixDQUFDLElBQUksQ0FBQ00sT0FBTztJQUNsRTtBQUNKO0FBQ0FKLEtBQUtELFdBQVcsR0FBR0EseURBQVdBLEVBQzlCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N5c3RlbS1wcm9tcHQtdG9vbC13ZWIvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9jaGF0L2NoYXQubWpzPzgyN2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ29tcGxldGlvbnNBUEkgZnJvbSBcIi4vY29tcGxldGlvbnMubWpzXCI7XG5pbXBvcnQgeyBDb21wbGV0aW9ucywgfSBmcm9tIFwiLi9jb21wbGV0aW9ucy5tanNcIjtcbmV4cG9ydCBjbGFzcyBDaGF0IGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvbXBsZXRpb25zID0gbmV3IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25zKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuQ2hhdC5Db21wbGV0aW9ucyA9IENvbXBsZXRpb25zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhdC5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnNBUEkiLCJDb21wbGV0aW9ucyIsIkNoYXQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNvbXBsZXRpb25zIiwiX2NsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/chat/chat.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/chat/completions.mjs":
/*!******************************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/chat/completions.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/openai/v1/chat/completions\", {\n            body,\n            ...options,\n            stream: body.stream ?? false\n        });\n    }\n} //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNGQUFzRjtBQUNyQztBQUMxQyxNQUFNQyxvQkFBb0JELHNEQUFXQTtJQUN4Q0UsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLCtCQUErQjtZQUNwREg7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZHLFFBQVFKLEtBQUtJLE1BQU0sSUFBSTtRQUMzQjtJQUNKO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeXN0ZW0tcHJvbXB0LXRvb2wtd2ViLy4uLy4uL25vZGVfbW9kdWxlcy9ncm9xLXNkay9yZXNvdXJjZXMvY2hhdC9jb21wbGV0aW9ucy5tanM/NDEwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgQ29tcGxldGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnMnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBsZXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb21wbGV0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJzdHJlYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/chat/completions.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/completions.mjs":
/*!*************************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/completions.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n} //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9jb21wbGV0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzRkFBc0Y7QUFDeEM7QUFDdkMsTUFBTUMsb0JBQW9CRCxzREFBV0E7QUFDNUMsRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeXN0ZW0tcHJvbXB0LXRvb2wtd2ViLy4uLy4uL25vZGVfbW9kdWxlcy9ncm9xLXNkay9yZXNvdXJjZXMvY29tcGxldGlvbnMubWpzP2ZjOWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL3Jlc291cmNlLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGxldGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkNvbXBsZXRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/completions.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/embeddings.mjs":
/*!************************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/embeddings.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Embeddings extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates an embedding vector representing the input text.\n     *\n     * @example\n     * ```ts\n     * const createEmbeddingResponse =\n     *   await client.embeddings.create({\n     *     input: 'The quick brown fox jumped over the lazy dog',\n     *     model: 'nomic-embed-text-v1_5',\n     *   });\n     * ```\n     */ create(body, options) {\n        return this._client.post(\"/openai/v1/embeddings\", {\n            body,\n            ...options\n        });\n    }\n} //# sourceMappingURL=embeddings.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9lbWJlZGRpbmdzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNGQUFzRjtBQUN4QztBQUN2QyxNQUFNQyxtQkFBbUJELHNEQUFXQTtJQUN2Qzs7Ozs7Ozs7Ozs7S0FXQyxHQUNERSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMseUJBQXlCO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3pFO0FBQ0osRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeXN0ZW0tcHJvbXB0LXRvb2wtd2ViLy4uLy4uL25vZGVfbW9kdWxlcy9ncm9xLXNkay9yZXNvdXJjZXMvZW1iZWRkaW5ncy5tanM/MTMyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgRW1iZWRkaW5ncyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVtYmVkZGluZyB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCB0ZXh0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGNyZWF0ZUVtYmVkZGluZ1Jlc3BvbnNlID1cbiAgICAgKiAgIGF3YWl0IGNsaWVudC5lbWJlZGRpbmdzLmNyZWF0ZSh7XG4gICAgICogICAgIGlucHV0OiAnVGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cnLFxuICAgICAqICAgICBtb2RlbDogJ25vbWljLWVtYmVkLXRleHQtdjFfNScsXG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9vcGVuYWkvdjEvZW1iZWRkaW5ncycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbWJlZGRpbmdzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJFbWJlZGRpbmdzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/embeddings.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/files.mjs":
/*!*******************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/files.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/../../node_modules/groq-sdk/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Files extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Upload a file that can be used across various endpoints.\n     *\n     * The Batch API only supports `.jsonl` files up to 100 MB in size. The input also\n     * has a specific required [format](/docs/batch).\n     *\n     * Please contact us if you need to increase these storage limits.\n     */ create(body, options) {\n        return this._client.post(\"/openai/v1/files\", _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Returns a list of files.\n     */ list(options) {\n        return this._client.get(\"/openai/v1/files\", options);\n    }\n    /**\n     * Delete a file.\n     */ delete(fileId, options) {\n        return this._client.delete(`/openai/v1/files/${fileId}`, options);\n    }\n    /**\n     * Returns the contents of the specified file.\n     */ content(fileId, options) {\n        return this._client.get(`/openai/v1/files/${fileId}/content`, {\n            ...options,\n            headers: {\n                Accept: \"application/octet-stream\",\n                ...options?.headers\n            },\n            __binaryResponse: true\n        });\n    }\n    /**\n     * Returns information about a file.\n     */ info(fileId, options) {\n        return this._client.get(`/openai/v1/files/${fileId}`, options);\n    }\n} //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9maWxlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3hDO0FBQ1Y7QUFDN0IsTUFBTUUsY0FBY0Ysc0RBQVdBO0lBQ2xDOzs7Ozs7O0tBT0MsR0FDREcsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLG9CQUFvQk4sa0VBQWdDLENBQUM7WUFBRUc7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDckc7SUFDQTs7S0FFQyxHQUNESSxLQUFLSixPQUFPLEVBQUU7UUFDVixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDSSxHQUFHLENBQUMsb0JBQW9CTDtJQUNoRDtJQUNBOztLQUVDLEdBQ0RNLE9BQU9DLE1BQU0sRUFBRVAsT0FBTyxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNLLE1BQU0sQ0FBQyxDQUFDLGlCQUFpQixFQUFFQyxPQUFPLENBQUMsRUFBRVA7SUFDN0Q7SUFDQTs7S0FFQyxHQUNEUSxRQUFRRCxNQUFNLEVBQUVQLE9BQU8sRUFBRTtRQUNyQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDSSxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRUUsT0FBTyxRQUFRLENBQUMsRUFBRTtZQUMxRCxHQUFHUCxPQUFPO1lBQ1ZTLFNBQVM7Z0JBQUVDLFFBQVE7Z0JBQTRCLEdBQUdWLFNBQVNTLE9BQU87WUFBQztZQUNuRUUsa0JBQWtCO1FBQ3RCO0lBQ0o7SUFDQTs7S0FFQyxHQUNEQyxLQUFLTCxNQUFNLEVBQUVQLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDSSxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRUUsT0FBTyxDQUFDLEVBQUVQO0lBQzFEO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeXN0ZW0tcHJvbXB0LXRvb2wtd2ViLy4uLy4uL25vZGVfbW9kdWxlcy9ncm9xLXNkay9yZXNvdXJjZXMvZmlsZXMubWpzP2ViNGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vY29yZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBGaWxlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBVcGxvYWQgYSBmaWxlIHRoYXQgY2FuIGJlIHVzZWQgYWNyb3NzIHZhcmlvdXMgZW5kcG9pbnRzLlxuICAgICAqXG4gICAgICogVGhlIEJhdGNoIEFQSSBvbmx5IHN1cHBvcnRzIGAuanNvbmxgIGZpbGVzIHVwIHRvIDEwMCBNQiBpbiBzaXplLiBUaGUgaW5wdXQgYWxzb1xuICAgICAqIGhhcyBhIHNwZWNpZmljIHJlcXVpcmVkIFtmb3JtYXRdKC9kb2NzL2JhdGNoKS5cbiAgICAgKlxuICAgICAqIFBsZWFzZSBjb250YWN0IHVzIGlmIHlvdSBuZWVkIHRvIGluY3JlYXNlIHRoZXNlIHN0b3JhZ2UgbGltaXRzLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL29wZW5haS92MS9maWxlcycsIENvcmUubXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGZpbGVzLlxuICAgICAqL1xuICAgIGxpc3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldCgnL29wZW5haS92MS9maWxlcycsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBmaWxlLlxuICAgICAqL1xuICAgIGRlbGV0ZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9vcGVuYWkvdjEvZmlsZXMvJHtmaWxlSWR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICAgKi9cbiAgICBjb250ZW50KGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL29wZW5haS92MS9maWxlcy8ke2ZpbGVJZH0vY29udGVudGAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgICAgIF9fYmluYXJ5UmVzcG9uc2U6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGEgZmlsZS5cbiAgICAgKi9cbiAgICBpbmZvKGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL29wZW5haS92MS9maWxlcy8ke2ZpbGVJZH1gLCBvcHRpb25zKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29yZSIsIkZpbGVzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsImxpc3QiLCJnZXQiLCJkZWxldGUiLCJmaWxlSWQiLCJjb250ZW50IiwiaGVhZGVycyIsIkFjY2VwdCIsIl9fYmluYXJ5UmVzcG9uc2UiLCJpbmZvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/files.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/resources/models.mjs":
/*!********************************************************!*\
  !*** ../../node_modules/groq-sdk/resources/models.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/../../node_modules/groq-sdk/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Models extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Get a specific model\n     */ retrieve(model, options) {\n        return this._client.get(`/openai/v1/models/${model}`, options);\n    }\n    /**\n     * get all available models\n     */ list(options) {\n        return this._client.get(\"/openai/v1/models\", options);\n    }\n    /**\n     * Delete a model\n     */ delete(model, options) {\n        return this._client.delete(`/openai/v1/models/${model}`, options);\n    }\n} //# sourceMappingURL=models.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3Jlc291cmNlcy9tb2RlbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3hDO0FBQ3ZDLE1BQU1DLGVBQWVELHNEQUFXQTtJQUNuQzs7S0FFQyxHQUNERSxTQUFTQyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUNyQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUgsTUFBTSxDQUFDLEVBQUVDO0lBQzFEO0lBQ0E7O0tBRUMsR0FDREcsS0FBS0gsT0FBTyxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHFCQUFxQkY7SUFDakQ7SUFDQTs7S0FFQyxHQUNESSxPQUFPTCxLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUNuQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDRyxNQUFNLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUwsTUFBTSxDQUFDLEVBQUVDO0lBQzdEO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeXN0ZW0tcHJvbXB0LXRvb2wtd2ViLy4uLy4uL25vZGVfbW9kdWxlcy9ncm9xLXNkay9yZXNvdXJjZXMvbW9kZWxzLm1qcz83MzQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBNb2RlbHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgbW9kZWxcbiAgICAgKi9cbiAgICByZXRyaWV2ZShtb2RlbCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL29wZW5haS92MS9tb2RlbHMvJHttb2RlbH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ2V0IGFsbCBhdmFpbGFibGUgbW9kZWxzXG4gICAgICovXG4gICAgbGlzdChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KCcvb3BlbmFpL3YxL21vZGVscycsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBtb2RlbFxuICAgICAqL1xuICAgIGRlbGV0ZShtb2RlbCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL29wZW5haS92MS9tb2RlbHMvJHttb2RlbH1gLCBvcHRpb25zKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlbHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIk1vZGVscyIsInJldHJpZXZlIiwibW9kZWwiLCJvcHRpb25zIiwiX2NsaWVudCIsImdldCIsImxpc3QiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/resources/models.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/uploads.mjs":
/*!***********************************************!*\
  !*** ../../node_modules/groq-sdk/uploads.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createForm: () => (/* binding */ createForm),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath),\n/* harmony export */   isBlobLike: () => (/* binding */ isBlobLike),\n/* harmony export */   isFileLike: () => (/* binding */ isFileLike),\n/* harmony export */   isMultipartBody: () => (/* binding */ isMultipartBody),\n/* harmony export */   isResponseLike: () => (/* binding */ isResponseLike),\n/* harmony export */   isUploadable: () => (/* binding */ isUploadable),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* binding */ maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* binding */ multipartFormRequestOptions),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(rsc)/../../node_modules/groq-sdk/_shims/index.mjs\");\n\n\nconst isResponseLike = (value)=>value != null && typeof value === \"object\" && typeof value.url === \"string\" && typeof value.blob === \"function\";\nconst isFileLike = (value)=>value != null && typeof value === \"object\" && typeof value.name === \"string\" && typeof value.lastModified === \"number\" && isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */ const isBlobLike = (value)=>value != null && typeof value === \"object\" && typeof value.size === \"number\" && typeof value.type === \"string\" && typeof value.text === \"function\" && typeof value.slice === \"function\" && typeof value.arrayBuffer === \"function\";\nconst isUploadable = (value)=>{\n    return isFileLike(value) || isResponseLike(value) || (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream)(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */ async function toFile(value, name, options) {\n    // If it's a promise, resolve it.\n    value = await value;\n    // If we've been given a `File` we don't need to do anything\n    if (isFileLike(value)) {\n        return value;\n    }\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? \"unknown_file\");\n        // we need to convert the `Blob` into an array buffer because the `Blob` class\n        // that `node-fetch` defines is incompatible with the web standard which results\n        // in `new File` interpreting it as a string instead of binary data.\n        const data = isBlobLike(blob) ? [\n            await blob.arrayBuffer()\n        ] : [\n            blob\n        ];\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File(data, name, options);\n    }\n    const bits = await getBytes(value);\n    name || (name = getName(value) ?? \"unknown_file\");\n    if (!options?.type) {\n        const type = bits[0]?.type;\n        if (typeof type === \"string\") {\n            options = {\n                ...options,\n                type\n            };\n        }\n    }\n    return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File(bits, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === \"string\" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer) {\n        parts.push(value);\n    } else if (isBlobLike(value)) {\n        parts.push(await value.arrayBuffer());\n    } else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value){\n            parts.push(chunk); // TODO, consider validating?\n        }\n    } else {\n        throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor?.name}; props: ${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    const props = Object.getOwnPropertyNames(value);\n    return `[${props.map((p)=>`\"${p}\"`).join(\", \")}]`;\n}\nfunction getName(value) {\n    return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop();\n}\nconst getStringFromMaybeBuffer = (x)=>{\n    if (typeof x === \"string\") return x;\n    if (typeof Buffer !== \"undefined\" && x instanceof Buffer) return String(x);\n    return undefined;\n};\nconst isAsyncIterableIterator = (value)=>value != null && typeof value === \"object\" && typeof value[Symbol.asyncIterator] === \"function\";\nconst isMultipartBody = (body)=>body && typeof body === \"object\" && body.body && body[Symbol.toStringTag] === \"MultipartBody\";\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */ const maybeMultipartFormRequestOptions = async (opts)=>{\n    if (!hasUploadableValue(opts.body)) return opts;\n    const form = await createForm(opts.body);\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst multipartFormRequestOptions = async (opts)=>{\n    const form = await createForm(opts.body);\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst createForm = async (body)=>{\n    const form = new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value])=>addFormValue(form, key, value)));\n    return form;\n};\nconst hasUploadableValue = (value)=>{\n    if (isUploadable(value)) return true;\n    if (Array.isArray(value)) return value.some(hasUploadableValue);\n    if (value && typeof value === \"object\") {\n        for(const k in value){\n            if (hasUploadableValue(value[k])) return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value)=>{\n    if (value === undefined) return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n        form.append(key, String(value));\n    } else if (isUploadable(value)) {\n        const file = await toFile(value);\n        form.append(key, file);\n    } else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry)=>addFormValue(form, key + \"[]\", entry)));\n    } else if (typeof value === \"object\") {\n        await Promise.all(Object.entries(value).map(([name, prop])=>addFormValue(form, `${key}[${name}]`, prop)));\n    } else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n}; //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/groq-sdk/version.mjs":
/*!***********************************************!*\
  !*** ../../node_modules/groq-sdk/version.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"0.32.0\"; // x-release-please-version\n //# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2dyb3Etc2RrL3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLFNBQVMsQ0FBQywyQkFBMkI7Q0FDNUQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3lzdGVtLXByb21wdC10b29sLXdlYi8uLi8uLi9ub2RlX21vZHVsZXMvZ3JvcS1zZGsvdmVyc2lvbi5tanM/NzBjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgVkVSU0lPTiA9ICcwLjMyLjAnOyAvLyB4LXJlbGVhc2UtcGxlYXNlLXZlcnNpb25cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24ubWpzLm1hcCJdLCJuYW1lcyI6WyJWRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/groq-sdk/version.mjs\n");

/***/ })

};
;